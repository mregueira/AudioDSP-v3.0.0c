
AudioDSP-v3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e94  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006050  08006050  00024000  2**0
                  CONTENTS
  4 .ARM          00000008  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006058  08006058  00024000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004000  20000000  08006060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20004000  0800a060  00024000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044b8  0800a060  000244b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024000  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00024030  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d61b  00000000  00000000  00024073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de1  00000000  00000000  0003168e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00033470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af0  00000000  00000000  00034248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029cf2  00000000  00000000  00034d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a3e  00000000  00000000  0005ea2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011eb75  00000000  00000000  0006f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fac  00000000  00000000  0018dfe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00191f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20004000 	.word	0x20004000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006014 	.word	0x08006014

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20004004 	.word	0x20004004
 80001d4:	08006014 	.word	0x08006014

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b970 	b.w	8000de8 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	460d      	mov	r5, r1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	460f      	mov	r7, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d14a      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4694      	mov	ip, r2
 8000b34:	d965      	bls.n	8000c02 <__udivmoddi4+0xe2>
 8000b36:	fab2 f382 	clz	r3, r2
 8000b3a:	b143      	cbz	r3, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b40:	f1c3 0220 	rsb	r2, r3, #32
 8000b44:	409f      	lsls	r7, r3
 8000b46:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b52:	fa1f f58c 	uxth.w	r5, ip
 8000b56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b5a:	0c22      	lsrs	r2, r4, #16
 8000b5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b64:	fb01 f005 	mul.w	r0, r1, r5
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x62>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b74:	f080 811c 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f240 8119 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4462      	add	r2, ip
 8000b82:	1a12      	subs	r2, r2, r0
 8000b84:	b2a4      	uxth	r4, r4
 8000b86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b92:	fb00 f505 	mul.w	r5, r0, r5
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x90>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba2:	f080 8107 	bcs.w	8000db4 <__udivmoddi4+0x294>
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	f240 8104 	bls.w	8000db4 <__udivmoddi4+0x294>
 8000bac:	4464      	add	r4, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11e      	cbz	r6, 8000bc2 <__udivmoddi4+0xa2>
 8000bba:	40dc      	lsrs	r4, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0xbc>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80ed 	beq.w	8000daa <__udivmoddi4+0x28a>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d149      	bne.n	8000c78 <__udivmoddi4+0x158>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	d302      	bcc.n	8000bee <__udivmoddi4+0xce>
 8000be8:	4282      	cmp	r2, r0
 8000bea:	f200 80f8 	bhi.w	8000dde <__udivmoddi4+0x2be>
 8000bee:	1a84      	subs	r4, r0, r2
 8000bf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d0e2      	beq.n	8000bc2 <__udivmoddi4+0xa2>
 8000bfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000c00:	e7df      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xe6>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f382 	clz	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c20:	fb07 2015 	mls	r0, r7, r5, r2
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c2a:	fb0e f005 	mul.w	r0, lr, r5
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c32:	eb1c 0202 	adds.w	r2, ip, r2
 8000c36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f200 80cb 	bhi.w	8000dd8 <__udivmoddi4+0x2b8>
 8000c42:	4645      	mov	r5, r8
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c54:	fb0e fe00 	mul.w	lr, lr, r0
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x14e>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x14c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f200 80bb 	bhi.w	8000de2 <__udivmoddi4+0x2c2>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c76:	e79f      	b.n	8000bb8 <__udivmoddi4+0x98>
 8000c78:	f1c1 0720 	rsb	r7, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c86:	fa05 f401 	lsl.w	r4, r5, r1
 8000c8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8e:	40fd      	lsrs	r5, r7
 8000c90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc0:	f080 8088 	bcs.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	f240 8085 	bls.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cca:	f1a8 0802 	sub.w	r8, r8, #2
 8000cce:	4464      	add	r4, ip
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	b29d      	uxth	r5, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cf0:	d26c      	bcs.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d96a      	bls.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	42ac      	cmp	r4, r5
 8000d08:	46c8      	mov	r8, r9
 8000d0a:	46ae      	mov	lr, r5
 8000d0c:	d356      	bcc.n	8000dbc <__udivmoddi4+0x29c>
 8000d0e:	d053      	beq.n	8000db8 <__udivmoddi4+0x298>
 8000d10:	b156      	cbz	r6, 8000d28 <__udivmoddi4+0x208>
 8000d12:	ebb0 0208 	subs.w	r2, r0, r8
 8000d16:	eb64 040e 	sbc.w	r4, r4, lr
 8000d1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1e:	40ca      	lsrs	r2, r1
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	4317      	orrs	r7, r2
 8000d24:	e9c6 7400 	strd	r7, r4, [r6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	f1c3 0120 	rsb	r1, r3, #32
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	fa20 f201 	lsr.w	r2, r0, r1
 8000d3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d40:	409d      	lsls	r5, r3
 8000d42:	432a      	orrs	r2, r5
 8000d44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1510 	mls	r5, r7, r0, r1
 8000d54:	0c11      	lsrs	r1, r2, #16
 8000d56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5e:	428d      	cmp	r5, r1
 8000d60:	fa04 f403 	lsl.w	r4, r4, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x258>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6e:	d22f      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d70:	428d      	cmp	r5, r1
 8000d72:	d92d      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d80:	fb07 1115 	mls	r1, r7, r5, r1
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	fb05 f10e 	mul.w	r1, r5, lr
 8000d8c:	4291      	cmp	r1, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x282>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d98:	d216      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d914      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9e:	3d02      	subs	r5, #2
 8000da0:	4462      	add	r2, ip
 8000da2:	1a52      	subs	r2, r2, r1
 8000da4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da8:	e738      	b.n	8000c1c <__udivmoddi4+0xfc>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e708      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000db0:	4639      	mov	r1, r7
 8000db2:	e6e6      	b.n	8000b82 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e6fb      	b.n	8000bb0 <__udivmoddi4+0x90>
 8000db8:	4548      	cmp	r0, r9
 8000dba:	d2a9      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000dbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	e7a3      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	e7ea      	b.n	8000da2 <__udivmoddi4+0x282>
 8000dcc:	462b      	mov	r3, r5
 8000dce:	e794      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dd0:	4640      	mov	r0, r8
 8000dd2:	e7d1      	b.n	8000d78 <__udivmoddi4+0x258>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	e77b      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd8:	3d02      	subs	r5, #2
 8000dda:	4462      	add	r2, ip
 8000ddc:	e732      	b.n	8000c44 <__udivmoddi4+0x124>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e70a      	b.n	8000bf8 <__udivmoddi4+0xd8>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e742      	b.n	8000c6e <__udivmoddi4+0x14e>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 71

void default_download_IC_1() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R0_SOFT_RESET_IC_1_Default );
 8000df0:	4bde      	ldr	r3, [pc, #888]	; (800116c <default_download_IC_1+0x380>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000df8:	2070      	movs	r0, #112	; 0x70
 8000dfa:	f001 fc2d 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R1_SOFT_RESET_IC_1_Default );
 8000dfe:	4bdc      	ldr	r3, [pc, #880]	; (8001170 <default_download_IC_1+0x384>)
 8000e00:	2202      	movs	r2, #2
 8000e02:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000e06:	2070      	movs	r0, #112	; 0x70
 8000e08:	f001 fc26 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R2_RESET_DELAY_IC_1_SIZE, R2_RESET_DELAY_IC_1_Default );
 8000e0c:	4ad9      	ldr	r2, [pc, #868]	; (8001174 <default_download_IC_1+0x388>)
 8000e0e:	2102      	movs	r1, #2
 8000e10:	2070      	movs	r0, #112	; 0x70
 8000e12:	f001 fc45 	bl	80026a0 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R3_HIBERNATE_IC_1_Default );
 8000e16:	4bd8      	ldr	r3, [pc, #864]	; (8001178 <default_download_IC_1+0x38c>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e1e:	2070      	movs	r0, #112	; 0x70
 8000e20:	f001 fc1a 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R4_HIBERNATE_IC_1_Default );
 8000e24:	4bd5      	ldr	r3, [pc, #852]	; (800117c <default_download_IC_1+0x390>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e2c:	2070      	movs	r0, #112	; 0x70
 8000e2e:	f001 fc13 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R5_HIBERNATE_DELAY_IC_1_SIZE, R5_HIBERNATE_DELAY_IC_1_Default );
 8000e32:	4ad3      	ldr	r2, [pc, #844]	; (8001180 <default_download_IC_1+0x394>)
 8000e34:	2102      	movs	r1, #2
 8000e36:	2070      	movs	r0, #112	; 0x70
 8000e38:	f001 fc32 	bl	80026a0 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R6_KILL_CORE_IC_1_Default );
 8000e3c:	4bd1      	ldr	r3, [pc, #836]	; (8001184 <default_download_IC_1+0x398>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e44:	2070      	movs	r0, #112	; 0x70
 8000e46:	f001 fc07 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R7_KILL_CORE_IC_1_Default );
 8000e4a:	4bcf      	ldr	r3, [pc, #828]	; (8001188 <default_download_IC_1+0x39c>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e52:	2070      	movs	r0, #112	; 0x70
 8000e54:	f001 fc00 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R8_PLL_ENABLE_IC_1_Default );
 8000e58:	4bcc      	ldr	r3, [pc, #816]	; (800118c <default_download_IC_1+0x3a0>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000e60:	2070      	movs	r0, #112	; 0x70
 8000e62:	f001 fbf9 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CTRL0_IC_1_ADDR, REG_PLL_CTRL0_IC_1_BYTE, R9_PLL_CTRL0_IC_1_Default );
 8000e66:	4bca      	ldr	r3, [pc, #808]	; (8001190 <default_download_IC_1+0x3a4>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e6e:	2070      	movs	r0, #112	; 0x70
 8000e70:	f001 fbf2 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CTRL1_IC_1_ADDR, REG_PLL_CTRL1_IC_1_BYTE, R10_PLL_CTRL1_IC_1_Default );
 8000e74:	4bc7      	ldr	r3, [pc, #796]	; (8001194 <default_download_IC_1+0x3a8>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	f24f 0101 	movw	r1, #61441	; 0xf001
 8000e7c:	2070      	movs	r0, #112	; 0x70
 8000e7e:	f001 fbeb 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CLK_SRC_IC_1_ADDR, REG_PLL_CLK_SRC_IC_1_BYTE, R11_PLL_CLK_SRC_IC_1_Default );
 8000e82:	4bc5      	ldr	r3, [pc, #788]	; (8001198 <default_download_IC_1+0x3ac>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	f24f 0102 	movw	r1, #61442	; 0xf002
 8000e8a:	2070      	movs	r0, #112	; 0x70
 8000e8c:	f001 fbe4 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MCLK_OUT_IC_1_ADDR, REG_MCLK_OUT_IC_1_BYTE, R12_MCLK_OUT_IC_1_Default );
 8000e90:	4bc2      	ldr	r3, [pc, #776]	; (800119c <default_download_IC_1+0x3b0>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	f24f 0105 	movw	r1, #61445	; 0xf005
 8000e98:	2070      	movs	r0, #112	; 0x70
 8000e9a:	f001 fbdd 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R13_PLL_ENABLE_IC_1_Default );
 8000e9e:	4bc0      	ldr	r3, [pc, #768]	; (80011a0 <default_download_IC_1+0x3b4>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000ea6:	2070      	movs	r0, #112	; 0x70
 8000ea8:	f001 fbd6 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R14_PLL_LOCK_DELAY_IC_1_SIZE, R14_PLL_LOCK_DELAY_IC_1_Default );
 8000eac:	4abd      	ldr	r2, [pc, #756]	; (80011a4 <default_download_IC_1+0x3b8>)
 8000eae:	2102      	movs	r1, #2
 8000eb0:	2070      	movs	r0, #112	; 0x70
 8000eb2:	f001 fbf5 	bl	80026a0 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE0_IC_1_ADDR, REG_POWER_ENABLE0_IC_1_BYTE, R15_POWER_ENABLE0_IC_1_Default );
 8000eb6:	4bbc      	ldr	r3, [pc, #752]	; (80011a8 <default_download_IC_1+0x3bc>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	f24f 0150 	movw	r1, #61520	; 0xf050
 8000ebe:	2070      	movs	r0, #112	; 0x70
 8000ec0:	f001 fbca 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE1_IC_1_ADDR, REG_POWER_ENABLE1_IC_1_BYTE, R16_POWER_ENABLE1_IC_1_Default );
 8000ec4:	4bb9      	ldr	r3, [pc, #740]	; (80011ac <default_download_IC_1+0x3c0>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f24f 0151 	movw	r1, #61521	; 0xf051
 8000ecc:	2070      	movs	r0, #112	; 0x70
 8000ece:	f001 fbc3 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN1_M_IC_1_ADDR, REG_CLK_GEN1_M_IC_1_BYTE, R17_CLK_GEN1_M_IC_1_Default );
 8000ed2:	4bb7      	ldr	r3, [pc, #732]	; (80011b0 <default_download_IC_1+0x3c4>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	f24f 0120 	movw	r1, #61472	; 0xf020
 8000eda:	2070      	movs	r0, #112	; 0x70
 8000edc:	f001 fbbc 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN1_N_IC_1_ADDR, REG_CLK_GEN1_N_IC_1_BYTE, R18_CLK_GEN1_N_IC_1_Default );
 8000ee0:	4bb4      	ldr	r3, [pc, #720]	; (80011b4 <default_download_IC_1+0x3c8>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f24f 0121 	movw	r1, #61473	; 0xf021
 8000ee8:	2070      	movs	r0, #112	; 0x70
 8000eea:	f001 fbb5 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN3_M_IC_1_ADDR, REG_CLK_GEN3_M_IC_1_BYTE, R19_CLK_GEN3_M_IC_1_Default );
 8000eee:	4bb2      	ldr	r3, [pc, #712]	; (80011b8 <default_download_IC_1+0x3cc>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	f24f 0124 	movw	r1, #61476	; 0xf024
 8000ef6:	2070      	movs	r0, #112	; 0x70
 8000ef8:	f001 fbae 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN3_N_IC_1_ADDR, REG_CLK_GEN3_N_IC_1_BYTE, R20_CLK_GEN3_N_IC_1_Default );
 8000efc:	4baf      	ldr	r3, [pc, #700]	; (80011bc <default_download_IC_1+0x3d0>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	f24f 0125 	movw	r1, #61477	; 0xf025
 8000f04:	2070      	movs	r0, #112	; 0x70
 8000f06:	f001 fba7 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP4_MODE_IC_1_ADDR, REG_MP4_MODE_IC_1_BYTE, R21_MP4_MODE_IC_1_Default );
 8000f0a:	4bad      	ldr	r3, [pc, #692]	; (80011c0 <default_download_IC_1+0x3d4>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f24f 5114 	movw	r1, #62740	; 0xf514
 8000f12:	2070      	movs	r0, #112	; 0x70
 8000f14:	f001 fba0 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP6_MODE_IC_1_ADDR, REG_MP6_MODE_IC_1_BYTE, R22_MP6_MODE_IC_1_Default );
 8000f18:	4baa      	ldr	r3, [pc, #680]	; (80011c4 <default_download_IC_1+0x3d8>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f24f 5116 	movw	r1, #62742	; 0xf516
 8000f20:	2070      	movs	r0, #112	; 0x70
 8000f22:	f001 fb99 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP10_MODE_IC_1_ADDR, REG_MP10_MODE_IC_1_BYTE, R23_MP10_MODE_IC_1_Default );
 8000f26:	4ba8      	ldr	r3, [pc, #672]	; (80011c8 <default_download_IC_1+0x3dc>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	f24f 511a 	movw	r1, #62746	; 0xf51a
 8000f2e:	2070      	movs	r0, #112	; 0x70
 8000f30:	f001 fb92 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_BCLK_OUT0_PIN_IC_1_ADDR, REG_BCLK_OUT0_PIN_IC_1_BYTE, R24_BCLK_OUT0_PIN_IC_1_Default );
 8000f34:	4ba5      	ldr	r3, [pc, #660]	; (80011cc <default_download_IC_1+0x3e0>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	f24f 7184 	movw	r1, #63364	; 0xf784
 8000f3c:	2070      	movs	r0, #112	; 0x70
 8000f3e:	f001 fb8b 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_LRCLK_IN2_PIN_IC_1_ADDR, REG_LRCLK_IN2_PIN_IC_1_BYTE, R25_LRCLK_IN2_PIN_IC_1_Default );
 8000f42:	4ba3      	ldr	r3, [pc, #652]	; (80011d0 <default_download_IC_1+0x3e4>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	f24f 718a 	movw	r1, #63370	; 0xf78a
 8000f4a:	2070      	movs	r0, #112	; 0x70
 8000f4c:	f001 fb84 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_LRCLK_OUT0_PIN_IC_1_ADDR, REG_LRCLK_OUT0_PIN_IC_1_BYTE, R26_LRCLK_OUT0_PIN_IC_1_Default );
 8000f50:	4ba0      	ldr	r3, [pc, #640]	; (80011d4 <default_download_IC_1+0x3e8>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	f24f 718c 	movw	r1, #63372	; 0xf78c
 8000f58:	2070      	movs	r0, #112	; 0x70
 8000f5a:	f001 fb7d 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SS_PIN_IC_1_ADDR, REG_SS_PIN_IC_1_BYTE, R27_SS_PIN_IC_1_Default );
 8000f5e:	4b9e      	ldr	r3, [pc, #632]	; (80011d8 <default_download_IC_1+0x3ec>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	f24f 719b 	movw	r1, #63387	; 0xf79b
 8000f66:	2070      	movs	r0, #112	; 0x70
 8000f68:	f001 fb76 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MOSI_ADDR1_PIN_IC_1_ADDR, REG_MOSI_ADDR1_PIN_IC_1_BYTE, R28_MOSI_ADDR1_PIN_IC_1_Default );
 8000f6c:	4b9b      	ldr	r3, [pc, #620]	; (80011dc <default_download_IC_1+0x3f0>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f24f 719c 	movw	r1, #63388	; 0xf79c
 8000f74:	2070      	movs	r0, #112	; 0x70
 8000f76:	f001 fb6f 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE0_IC_1_ADDR, REG_SOUT_SOURCE0_IC_1_BYTE, R29_SOUT_SOURCE0_IC_1_Default );
 8000f7a:	4b99      	ldr	r3, [pc, #612]	; (80011e0 <default_download_IC_1+0x3f4>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f24f 1180 	movw	r1, #61824	; 0xf180
 8000f82:	2070      	movs	r0, #112	; 0x70
 8000f84:	f001 fb68 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE1_IC_1_ADDR, REG_SOUT_SOURCE1_IC_1_BYTE, R30_SOUT_SOURCE1_IC_1_Default );
 8000f88:	4b96      	ldr	r3, [pc, #600]	; (80011e4 <default_download_IC_1+0x3f8>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f24f 1181 	movw	r1, #61825	; 0xf181
 8000f90:	2070      	movs	r0, #112	; 0x70
 8000f92:	f001 fb61 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE2_IC_1_ADDR, REG_SOUT_SOURCE2_IC_1_BYTE, R31_SOUT_SOURCE2_IC_1_Default );
 8000f96:	4b94      	ldr	r3, [pc, #592]	; (80011e8 <default_download_IC_1+0x3fc>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f24f 1182 	movw	r1, #61826	; 0xf182
 8000f9e:	2070      	movs	r0, #112	; 0x70
 8000fa0:	f001 fb5a 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE3_IC_1_ADDR, REG_SOUT_SOURCE3_IC_1_BYTE, R32_SOUT_SOURCE3_IC_1_Default );
 8000fa4:	4b91      	ldr	r3, [pc, #580]	; (80011ec <default_download_IC_1+0x400>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f24f 1183 	movw	r1, #61827	; 0xf183
 8000fac:	2070      	movs	r0, #112	; 0x70
 8000fae:	f001 fb53 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE4_IC_1_ADDR, REG_SOUT_SOURCE4_IC_1_BYTE, R33_SOUT_SOURCE4_IC_1_Default );
 8000fb2:	4b8f      	ldr	r3, [pc, #572]	; (80011f0 <default_download_IC_1+0x404>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f24f 1184 	movw	r1, #61828	; 0xf184
 8000fba:	2070      	movs	r0, #112	; 0x70
 8000fbc:	f001 fb4c 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE5_IC_1_ADDR, REG_SOUT_SOURCE5_IC_1_BYTE, R34_SOUT_SOURCE5_IC_1_Default );
 8000fc0:	4b8c      	ldr	r3, [pc, #560]	; (80011f4 <default_download_IC_1+0x408>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f24f 1185 	movw	r1, #61829	; 0xf185
 8000fc8:	2070      	movs	r0, #112	; 0x70
 8000fca:	f001 fb45 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE6_IC_1_ADDR, REG_SOUT_SOURCE6_IC_1_BYTE, R35_SOUT_SOURCE6_IC_1_Default );
 8000fce:	4b8a      	ldr	r3, [pc, #552]	; (80011f8 <default_download_IC_1+0x40c>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f24f 1186 	movw	r1, #61830	; 0xf186
 8000fd6:	2070      	movs	r0, #112	; 0x70
 8000fd8:	f001 fb3e 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE7_IC_1_ADDR, REG_SOUT_SOURCE7_IC_1_BYTE, R36_SOUT_SOURCE7_IC_1_Default );
 8000fdc:	4b87      	ldr	r3, [pc, #540]	; (80011fc <default_download_IC_1+0x410>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f24f 1187 	movw	r1, #61831	; 0xf187
 8000fe4:	2070      	movs	r0, #112	; 0x70
 8000fe6:	f001 fb37 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE8_IC_1_ADDR, REG_SOUT_SOURCE8_IC_1_BYTE, R37_SOUT_SOURCE8_IC_1_Default );
 8000fea:	4b85      	ldr	r3, [pc, #532]	; (8001200 <default_download_IC_1+0x414>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	f24f 1188 	movw	r1, #61832	; 0xf188
 8000ff2:	2070      	movs	r0, #112	; 0x70
 8000ff4:	f001 fb30 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE9_IC_1_ADDR, REG_SOUT_SOURCE9_IC_1_BYTE, R38_SOUT_SOURCE9_IC_1_Default );
 8000ff8:	4b82      	ldr	r3, [pc, #520]	; (8001204 <default_download_IC_1+0x418>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f24f 1189 	movw	r1, #61833	; 0xf189
 8001000:	2070      	movs	r0, #112	; 0x70
 8001002:	f001 fb29 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE10_IC_1_ADDR, REG_SOUT_SOURCE10_IC_1_BYTE, R39_SOUT_SOURCE10_IC_1_Default );
 8001006:	4b80      	ldr	r3, [pc, #512]	; (8001208 <default_download_IC_1+0x41c>)
 8001008:	2202      	movs	r2, #2
 800100a:	f24f 118a 	movw	r1, #61834	; 0xf18a
 800100e:	2070      	movs	r0, #112	; 0x70
 8001010:	f001 fb22 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE11_IC_1_ADDR, REG_SOUT_SOURCE11_IC_1_BYTE, R40_SOUT_SOURCE11_IC_1_Default );
 8001014:	4b7d      	ldr	r3, [pc, #500]	; (800120c <default_download_IC_1+0x420>)
 8001016:	2202      	movs	r2, #2
 8001018:	f24f 118b 	movw	r1, #61835	; 0xf18b
 800101c:	2070      	movs	r0, #112	; 0x70
 800101e:	f001 fb1b 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE12_IC_1_ADDR, REG_SOUT_SOURCE12_IC_1_BYTE, R41_SOUT_SOURCE12_IC_1_Default );
 8001022:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <default_download_IC_1+0x424>)
 8001024:	2202      	movs	r2, #2
 8001026:	f24f 118c 	movw	r1, #61836	; 0xf18c
 800102a:	2070      	movs	r0, #112	; 0x70
 800102c:	f001 fb14 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE13_IC_1_ADDR, REG_SOUT_SOURCE13_IC_1_BYTE, R42_SOUT_SOURCE13_IC_1_Default );
 8001030:	4b78      	ldr	r3, [pc, #480]	; (8001214 <default_download_IC_1+0x428>)
 8001032:	2202      	movs	r2, #2
 8001034:	f24f 118d 	movw	r1, #61837	; 0xf18d
 8001038:	2070      	movs	r0, #112	; 0x70
 800103a:	f001 fb0d 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE14_IC_1_ADDR, REG_SOUT_SOURCE14_IC_1_BYTE, R43_SOUT_SOURCE14_IC_1_Default );
 800103e:	4b76      	ldr	r3, [pc, #472]	; (8001218 <default_download_IC_1+0x42c>)
 8001040:	2202      	movs	r2, #2
 8001042:	f24f 118e 	movw	r1, #61838	; 0xf18e
 8001046:	2070      	movs	r0, #112	; 0x70
 8001048:	f001 fb06 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE15_IC_1_ADDR, REG_SOUT_SOURCE15_IC_1_BYTE, R44_SOUT_SOURCE15_IC_1_Default );
 800104c:	4b73      	ldr	r3, [pc, #460]	; (800121c <default_download_IC_1+0x430>)
 800104e:	2202      	movs	r2, #2
 8001050:	f24f 118f 	movw	r1, #61839	; 0xf18f
 8001054:	2070      	movs	r0, #112	; 0x70
 8001056:	f001 faff 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE16_IC_1_ADDR, REG_SOUT_SOURCE16_IC_1_BYTE, R45_SOUT_SOURCE16_IC_1_Default );
 800105a:	4b71      	ldr	r3, [pc, #452]	; (8001220 <default_download_IC_1+0x434>)
 800105c:	2202      	movs	r2, #2
 800105e:	f24f 1190 	movw	r1, #61840	; 0xf190
 8001062:	2070      	movs	r0, #112	; 0x70
 8001064:	f001 faf8 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE17_IC_1_ADDR, REG_SOUT_SOURCE17_IC_1_BYTE, R46_SOUT_SOURCE17_IC_1_Default );
 8001068:	4b6e      	ldr	r3, [pc, #440]	; (8001224 <default_download_IC_1+0x438>)
 800106a:	2202      	movs	r2, #2
 800106c:	f24f 1191 	movw	r1, #61841	; 0xf191
 8001070:	2070      	movs	r0, #112	; 0x70
 8001072:	f001 faf1 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE18_IC_1_ADDR, REG_SOUT_SOURCE18_IC_1_BYTE, R47_SOUT_SOURCE18_IC_1_Default );
 8001076:	4b6c      	ldr	r3, [pc, #432]	; (8001228 <default_download_IC_1+0x43c>)
 8001078:	2202      	movs	r2, #2
 800107a:	f24f 1192 	movw	r1, #61842	; 0xf192
 800107e:	2070      	movs	r0, #112	; 0x70
 8001080:	f001 faea 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE19_IC_1_ADDR, REG_SOUT_SOURCE19_IC_1_BYTE, R48_SOUT_SOURCE19_IC_1_Default );
 8001084:	4b69      	ldr	r3, [pc, #420]	; (800122c <default_download_IC_1+0x440>)
 8001086:	2202      	movs	r2, #2
 8001088:	f24f 1193 	movw	r1, #61843	; 0xf193
 800108c:	2070      	movs	r0, #112	; 0x70
 800108e:	f001 fae3 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE20_IC_1_ADDR, REG_SOUT_SOURCE20_IC_1_BYTE, R49_SOUT_SOURCE20_IC_1_Default );
 8001092:	4b67      	ldr	r3, [pc, #412]	; (8001230 <default_download_IC_1+0x444>)
 8001094:	2202      	movs	r2, #2
 8001096:	f24f 1194 	movw	r1, #61844	; 0xf194
 800109a:	2070      	movs	r0, #112	; 0x70
 800109c:	f001 fadc 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE21_IC_1_ADDR, REG_SOUT_SOURCE21_IC_1_BYTE, R50_SOUT_SOURCE21_IC_1_Default );
 80010a0:	4b64      	ldr	r3, [pc, #400]	; (8001234 <default_download_IC_1+0x448>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	f24f 1195 	movw	r1, #61845	; 0xf195
 80010a8:	2070      	movs	r0, #112	; 0x70
 80010aa:	f001 fad5 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE22_IC_1_ADDR, REG_SOUT_SOURCE22_IC_1_BYTE, R51_SOUT_SOURCE22_IC_1_Default );
 80010ae:	4b62      	ldr	r3, [pc, #392]	; (8001238 <default_download_IC_1+0x44c>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	f24f 1196 	movw	r1, #61846	; 0xf196
 80010b6:	2070      	movs	r0, #112	; 0x70
 80010b8:	f001 face 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE23_IC_1_ADDR, REG_SOUT_SOURCE23_IC_1_BYTE, R52_SOUT_SOURCE23_IC_1_Default );
 80010bc:	4b5f      	ldr	r3, [pc, #380]	; (800123c <default_download_IC_1+0x450>)
 80010be:	2202      	movs	r2, #2
 80010c0:	f24f 1197 	movw	r1, #61847	; 0xf197
 80010c4:	2070      	movs	r0, #112	; 0x70
 80010c6:	f001 fac7 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_0_0_IC_1_ADDR, REG_SERIAL_BYTE_0_0_IC_1_BYTE, R53_SERIAL_BYTE_0_0_IC_1_Default );
 80010ca:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <default_download_IC_1+0x454>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 80010d2:	2070      	movs	r0, #112	; 0x70
 80010d4:	f001 fac0 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_1_0_IC_1_ADDR, REG_SERIAL_BYTE_1_0_IC_1_BYTE, R54_SERIAL_BYTE_1_0_IC_1_Default );
 80010d8:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <default_download_IC_1+0x458>)
 80010da:	2202      	movs	r2, #2
 80010dc:	f24f 2104 	movw	r1, #61956	; 0xf204
 80010e0:	2070      	movs	r0, #112	; 0x70
 80010e2:	f001 fab9 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_2_0_IC_1_ADDR, REG_SERIAL_BYTE_2_0_IC_1_BYTE, R55_SERIAL_BYTE_2_0_IC_1_Default );
 80010e6:	4b58      	ldr	r3, [pc, #352]	; (8001248 <default_download_IC_1+0x45c>)
 80010e8:	2202      	movs	r2, #2
 80010ea:	f24f 2108 	movw	r1, #61960	; 0xf208
 80010ee:	2070      	movs	r0, #112	; 0x70
 80010f0:	f001 fab2 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_3_0_IC_1_ADDR, REG_SERIAL_BYTE_3_0_IC_1_BYTE, R56_SERIAL_BYTE_3_0_IC_1_Default );
 80010f4:	4b55      	ldr	r3, [pc, #340]	; (800124c <default_download_IC_1+0x460>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	f24f 210c 	movw	r1, #61964	; 0xf20c
 80010fc:	2070      	movs	r0, #112	; 0x70
 80010fe:	f001 faab 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_4_0_IC_1_ADDR, REG_SERIAL_BYTE_4_0_IC_1_BYTE, R57_SERIAL_BYTE_4_0_IC_1_Default );
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <default_download_IC_1+0x464>)
 8001104:	2202      	movs	r2, #2
 8001106:	f24f 2110 	movw	r1, #61968	; 0xf210
 800110a:	2070      	movs	r0, #112	; 0x70
 800110c:	f001 faa4 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_5_0_IC_1_ADDR, REG_SERIAL_BYTE_5_0_IC_1_BYTE, R58_SERIAL_BYTE_5_0_IC_1_Default );
 8001110:	4b50      	ldr	r3, [pc, #320]	; (8001254 <default_download_IC_1+0x468>)
 8001112:	2202      	movs	r2, #2
 8001114:	f24f 2114 	movw	r1, #61972	; 0xf214
 8001118:	2070      	movs	r0, #112	; 0x70
 800111a:	f001 fa9d 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_6_0_IC_1_ADDR, REG_SERIAL_BYTE_6_0_IC_1_BYTE, R59_SERIAL_BYTE_6_0_IC_1_Default );
 800111e:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <default_download_IC_1+0x46c>)
 8001120:	2202      	movs	r2, #2
 8001122:	f24f 2118 	movw	r1, #61976	; 0xf218
 8001126:	2070      	movs	r0, #112	; 0x70
 8001128:	f001 fa96 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_7_0_IC_1_ADDR, REG_SERIAL_BYTE_7_0_IC_1_BYTE, R60_SERIAL_BYTE_7_0_IC_1_Default );
 800112c:	4b4b      	ldr	r3, [pc, #300]	; (800125c <default_download_IC_1+0x470>)
 800112e:	2202      	movs	r2, #2
 8001130:	f24f 211c 	movw	r1, #61980	; 0xf21c
 8001134:	2070      	movs	r0, #112	; 0x70
 8001136:	f001 fa8f 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
 800113a:	4b49      	ldr	r3, [pc, #292]	; (8001260 <default_download_IC_1+0x474>)
 800113c:	f641 223c 	movw	r2, #6716	; 0x1a3c
 8001140:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001144:	2070      	movs	r0, #112	; 0x70
 8001146:	f001 fa87 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
 800114a:	4b46      	ldr	r3, [pc, #280]	; (8001264 <default_download_IC_1+0x478>)
 800114c:	f641 32ec 	movw	r2, #7148	; 0x1bec
 8001150:	2100      	movs	r1, #0
 8001152:	2070      	movs	r0, #112	; 0x70
 8001154:	f001 fa80 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, DM1_DATA_ADDR_IC_1, DM1_DATA_SIZE_IC_1, DM1_DATA_Data_IC_1 );
 8001158:	4b43      	ldr	r3, [pc, #268]	; (8001268 <default_download_IC_1+0x47c>)
 800115a:	f44f 6209 	mov.w	r2, #2192	; 0x890
 800115e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001162:	2070      	movs	r0, #112	; 0x70
 8001164:	f001 fa78 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
 8001168:	e080      	b.n	800126c <default_download_IC_1+0x480>
 800116a:	bf00      	nop
 800116c:	2000401c 	.word	0x2000401c
 8001170:	20003eb8 	.word	0x20003eb8
 8001174:	20003ebc 	.word	0x20003ebc
 8001178:	20004020 	.word	0x20004020
 800117c:	20003ec0 	.word	0x20003ec0
 8001180:	20003ec4 	.word	0x20003ec4
 8001184:	20004024 	.word	0x20004024
 8001188:	20003ec8 	.word	0x20003ec8
 800118c:	20004028 	.word	0x20004028
 8001190:	20003ecc 	.word	0x20003ecc
 8001194:	20003ed0 	.word	0x20003ed0
 8001198:	20003ed4 	.word	0x20003ed4
 800119c:	20003ed8 	.word	0x20003ed8
 80011a0:	20003edc 	.word	0x20003edc
 80011a4:	20003ee0 	.word	0x20003ee0
 80011a8:	20003ee4 	.word	0x20003ee4
 80011ac:	2000402c 	.word	0x2000402c
 80011b0:	20003ee8 	.word	0x20003ee8
 80011b4:	20003eec 	.word	0x20003eec
 80011b8:	20003ef0 	.word	0x20003ef0
 80011bc:	20003ef4 	.word	0x20003ef4
 80011c0:	20003ef8 	.word	0x20003ef8
 80011c4:	20003efc 	.word	0x20003efc
 80011c8:	20003f00 	.word	0x20003f00
 80011cc:	20003f04 	.word	0x20003f04
 80011d0:	20003f08 	.word	0x20003f08
 80011d4:	20003f0c 	.word	0x20003f0c
 80011d8:	20003f10 	.word	0x20003f10
 80011dc:	20003f14 	.word	0x20003f14
 80011e0:	20003f18 	.word	0x20003f18
 80011e4:	20003f1c 	.word	0x20003f1c
 80011e8:	20003f20 	.word	0x20003f20
 80011ec:	20003f24 	.word	0x20003f24
 80011f0:	20003f28 	.word	0x20003f28
 80011f4:	20003f2c 	.word	0x20003f2c
 80011f8:	20003f30 	.word	0x20003f30
 80011fc:	20003f34 	.word	0x20003f34
 8001200:	20003f38 	.word	0x20003f38
 8001204:	20003f3c 	.word	0x20003f3c
 8001208:	20003f40 	.word	0x20003f40
 800120c:	20003f44 	.word	0x20003f44
 8001210:	20003f48 	.word	0x20003f48
 8001214:	20003f4c 	.word	0x20003f4c
 8001218:	20003f50 	.word	0x20003f50
 800121c:	20003f54 	.word	0x20003f54
 8001220:	20003f58 	.word	0x20003f58
 8001224:	20003f5c 	.word	0x20003f5c
 8001228:	20003f60 	.word	0x20003f60
 800122c:	20003f64 	.word	0x20003f64
 8001230:	20003f68 	.word	0x20003f68
 8001234:	20003f6c 	.word	0x20003f6c
 8001238:	20003f70 	.word	0x20003f70
 800123c:	20003f74 	.word	0x20003f74
 8001240:	20003f78 	.word	0x20003f78
 8001244:	20003f7c 	.word	0x20003f7c
 8001248:	20003f80 	.word	0x20003f80
 800124c:	20003f84 	.word	0x20003f84
 8001250:	20003f88 	.word	0x20003f88
 8001254:	20003f8c 	.word	0x20003f8c
 8001258:	20003f90 	.word	0x20003f90
 800125c:	20003f94 	.word	0x20003f94
 8001260:	20000890 	.word	0x20000890
 8001264:	200022cc 	.word	0x200022cc
 8001268:	20000000 	.word	0x20000000
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R64_KILL_CORE_IC_1_Default );
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <default_download_IC_1+0x4e4>)
 800126e:	2202      	movs	r2, #2
 8001270:	f24f 4103 	movw	r1, #62467	; 0xf403
 8001274:	2070      	movs	r0, #112	; 0x70
 8001276:	f001 f9ef 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_ADDRESS_IC_1_ADDR, REG_START_ADDRESS_IC_1_BYTE, R65_START_ADDRESS_IC_1_Default );
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <default_download_IC_1+0x4e8>)
 800127c:	2202      	movs	r2, #2
 800127e:	f24f 4104 	movw	r1, #62468	; 0xf404
 8001282:	2070      	movs	r0, #112	; 0x70
 8001284:	f001 f9e8 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_PULSE_IC_1_ADDR, REG_START_PULSE_IC_1_BYTE, R66_START_PULSE_IC_1_Default );
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <default_download_IC_1+0x4ec>)
 800128a:	2202      	movs	r2, #2
 800128c:	f24f 4101 	movw	r1, #62465	; 0xf401
 8001290:	2070      	movs	r0, #112	; 0x70
 8001292:	f001 f9e1 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R67_START_CORE_IC_1_Default );
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <default_download_IC_1+0x4f0>)
 8001298:	2202      	movs	r2, #2
 800129a:	f24f 4102 	movw	r1, #62466	; 0xf402
 800129e:	2070      	movs	r0, #112	; 0x70
 80012a0:	f001 f9da 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R68_START_CORE_IC_1_Default );
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <default_download_IC_1+0x4f4>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	f24f 4102 	movw	r1, #62466	; 0xf402
 80012ac:	2070      	movs	r0, #112	; 0x70
 80012ae:	f001 f9d3 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R69_START_DELAY_IC_1_SIZE, R69_START_DELAY_IC_1_Default );
 80012b2:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <default_download_IC_1+0x4f8>)
 80012b4:	2102      	movs	r1, #2
 80012b6:	2070      	movs	r0, #112	; 0x70
 80012b8:	f001 f9f2 	bl	80026a0 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R70_HIBERNATE_IC_1_Default );
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <default_download_IC_1+0x4fc>)
 80012be:	2202      	movs	r2, #2
 80012c0:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80012c4:	2070      	movs	r0, #112	; 0x70
 80012c6:	f001 f9c7 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20004030 	.word	0x20004030
 80012d4:	20004034 	.word	0x20004034
 80012d8:	20003f98 	.word	0x20003f98
 80012dc:	20004038 	.word	0x20004038
 80012e0:	20003f9c 	.word	0x20003f9c
 80012e4:	20003fa0 	.word	0x20003fa0
 80012e8:	2000403c 	.word	0x2000403c

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b0e9      	sub	sp, #420	; 0x1a4
 80012f0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  uint16_t k = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
	  uint16_t pote_aux = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
	  uint16_t BandAddress[ADC_POT]; // Addresses of filters
	  uint32_t vol_data[30]; // Fixed volume values
	  uint32_t boost_data[30]; // Fixed boost loudness values
	  uint32_t comp_data[30]; // Fixed compensation values

	  BandAddress[0] = MOD_BAND32_SEL_DCINPALG145X1VALUE_ADDR;
 80012fe:	f44f 63d9 	mov.w	r3, #1736	; 0x6c8
 8001302:	f8a7 316c 	strh.w	r3, [r7, #364]	; 0x16c
	  BandAddress[1] = MOD_BAND64_SEL_DCINPALG145X2VALUE_ADDR;
 8001306:	f240 63c9 	movw	r3, #1737	; 0x6c9
 800130a:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
	  BandAddress[2] = MOD_BAND128_SEL_DCINPALG145X3VALUE_ADDR;
 800130e:	f240 63ca 	movw	r3, #1738	; 0x6ca
 8001312:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
	  BandAddress[3] = MOD_BAND256_SEL_DCINPALG145X4VALUE_ADDR;
 8001316:	f240 63cb 	movw	r3, #1739	; 0x6cb
 800131a:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
	  BandAddress[4] = MOD_BAND512_SEL_DCINPALG145X5VALUE_ADDR;
 800131e:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8001322:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
	  BandAddress[5] = MOD_BAND1K_SEL_DCINPALG145X6VALUE_ADDR;
 8001326:	f240 63cd 	movw	r3, #1741	; 0x6cd
 800132a:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
	  BandAddress[6] = MOD_BAND2K_SEL_DCINPALG145X7VALUE_ADDR;
 800132e:	f240 63ce 	movw	r3, #1742	; 0x6ce
 8001332:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178
	  BandAddress[7] = MOD_BAND4K_SEL_DCINPALG145X8VALUE_ADDR;
 8001336:	f240 63cf 	movw	r3, #1743	; 0x6cf
 800133a:	f8a7 317a 	strh.w	r3, [r7, #378]	; 0x17a
	  BandAddress[8] = MOD_BAND8K_SEL_DCINPALG145X9VALUE_ADDR;
 800133e:	f44f 63da 	mov.w	r3, #1744	; 0x6d0
 8001342:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
	  BandAddress[9] = MOD_BAND16K_SEL_DCINPALG145X10VALUE_ADDR;
 8001346:	f240 63d1 	movw	r3, #1745	; 0x6d1
 800134a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
	  BandAddress[10] = MOD_BANDSUB_SEL_DCINPALG145X11VALUE_ADDR;
 800134e:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8001352:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
	  BandAddress[VOL_ARRAY] = MOD_VOL_GAINALGNS145X1GAIN_ADDR;
 8001356:	f240 63d7 	movw	r3, #1751	; 0x6d7
 800135a:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
	  BandAddress[LOUD_LOW_ARRAY] = MOD_LOUD_ALG0_LEVEL0_ADDR;
 800135e:	23b5      	movs	r3, #181	; 0xb5
 8001360:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
	  BandAddress[LOUD_HIGH_ARRAY] = MOD_LOUD_ALG0_LEVEL1_ADDR;
 8001364:	23b6      	movs	r3, #182	; 0xb6
 8001366:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186
	  BandAddress[LOUD_GRL_ARRAY] = MOD_LOUD_SEL_DCINPALG145X12VALUE_ADDR;
 800136a:	f240 63d3 	movw	r3, #1747	; 0x6d3
 800136e:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188

	  // 8.24 FixPoint
	  vol_data[29] = 0x01000000; // 0dB
 8001372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001376:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	  vol_data[28] = 0x00e42904; // -1dB
 800137a:	4bc2      	ldr	r3, [pc, #776]	; (8001684 <main+0x398>)
 800137c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	  vol_data[27] = 0x00cb5918; // -2dB
 8001380:	4bc1      	ldr	r3, [pc, #772]	; (8001688 <main+0x39c>)
 8001382:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	  vol_data[26] = 0x00b53bee; // -3dB
 8001386:	4bc1      	ldr	r3, [pc, #772]	; (800168c <main+0x3a0>)
 8001388:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	  vol_data[25] = 0x00a1866a; // -4dB
 800138c:	4bc0      	ldr	r3, [pc, #768]	; (8001690 <main+0x3a4>)
 800138e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	  vol_data[24] = 0x008ff598; // -5dB
 8001392:	4bc0      	ldr	r3, [pc, #768]	; (8001694 <main+0x3a8>)
 8001394:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	  vol_data[23] = 0x00804dce; // -6dB
 8001398:	4bbf      	ldr	r3, [pc, #764]	; (8001698 <main+0x3ac>)
 800139a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	  vol_data[22] = 0x006fbf80; // -7dB (-7.2dB)
 800139e:	4bbf      	ldr	r3, [pc, #764]	; (800169c <main+0x3b0>)
 80013a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	  vol_data[21] = 0x0065ea58; // -8dB
 80013a4:	4bbe      	ldr	r3, [pc, #760]	; (80016a0 <main+0x3b4>)
 80013a6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	  vol_data[20] = 0x005ad50c; // -9dB
 80013aa:	4bbe      	ldr	r3, [pc, #760]	; (80016a4 <main+0x3b8>)
 80013ac:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	  vol_data[19] = 0x0050f44c; // -10dB
 80013b0:	4bbd      	ldr	r3, [pc, #756]	; (80016a8 <main+0x3bc>)
 80013b2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	  vol_data[18] = 0x0048268c; // -11dB
 80013b6:	4bbd      	ldr	r3, [pc, #756]	; (80016ac <main+0x3c0>)
 80013b8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	  vol_data[17] = 0x00404de6; // -12dB
 80013bc:	4bbc      	ldr	r3, [pc, #752]	; (80016b0 <main+0x3c4>)
 80013be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	  vol_data[16] = 0x00394fae; // -13dB
 80013c2:	4bbc      	ldr	r3, [pc, #752]	; (80016b4 <main+0x3c8>)
 80013c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  vol_data[15] = 0x00331426; // -14dB
 80013c8:	4bbb      	ldr	r3, [pc, #748]	; (80016b8 <main+0x3cc>)
 80013ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  vol_data[14] = 0x002d8620; // -15dB
 80013ce:	4bbb      	ldr	r3, [pc, #748]	; (80016bc <main+0x3d0>)
 80013d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  vol_data[13] = 0x002892c0; // -16dB
 80013d4:	4bba      	ldr	r3, [pc, #744]	; (80016c0 <main+0x3d4>)
 80013d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  vol_data[12] = 0x00242934; // -17dB
 80013da:	4bba      	ldr	r3, [pc, #744]	; (80016c4 <main+0x3d8>)
 80013dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  vol_data[11] = 0x00203a7e; // -18dB
 80013e0:	4bb9      	ldr	r3, [pc, #740]	; (80016c8 <main+0x3dc>)
 80013e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  vol_data[10] = 0x001cb942; // -19dB
 80013e6:	4bb9      	ldr	r3, [pc, #740]	; (80016cc <main+0x3e0>)
 80013e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  vol_data[9] = 0x00199998; // -20dB
 80013ec:	4bb8      	ldr	r3, [pc, #736]	; (80016d0 <main+0x3e4>)
 80013ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  vol_data[8] = 0x0016d0e6; // -21dB
 80013f2:	4bb8      	ldr	r3, [pc, #736]	; (80016d4 <main+0x3e8>)
 80013f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  vol_data[7] = 0x001455b4; // -22dB
 80013f8:	4bb7      	ldr	r3, [pc, #732]	; (80016d8 <main+0x3ec>)
 80013fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  vol_data[6] = 0x00121f96; // -23dB
 80013fe:	4bb7      	ldr	r3, [pc, #732]	; (80016dc <main+0x3f0>)
 8001400:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  vol_data[5] = 0x0010270a; // -24dB
 8001404:	4bb6      	ldr	r3, [pc, #728]	; (80016e0 <main+0x3f4>)
 8001406:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	  vol_data[4] = 0x000e655c; // -25dB
 800140a:	4bb6      	ldr	r3, [pc, #728]	; (80016e4 <main+0x3f8>)
 800140c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  vol_data[3] = 0x000cd494; // -26dB
 8001410:	4bb5      	ldr	r3, [pc, #724]	; (80016e8 <main+0x3fc>)
 8001412:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  vol_data[2] = 0x000b6f62; // -27dB
 8001416:	4bb5      	ldr	r3, [pc, #724]	; (80016ec <main+0x400>)
 8001418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  vol_data[1] = 0x000a3108; // -28dB
 800141c:	4bb4      	ldr	r3, [pc, #720]	; (80016f0 <main+0x404>)
 800141e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  vol_data[0] = 0x0009154e; // -29dB
 8001422:	4bb4      	ldr	r3, [pc, #720]	; (80016f4 <main+0x408>)
 8001424:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	  // 8.24 Compensation FixPoint
	  comp_data[29] = 0x01000000; // 0dB
 8001428:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800142c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001430:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001434:	675a      	str	r2, [r3, #116]	; 0x74
	  comp_data[28] = 0x011F3B64; // +1dB
 8001436:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800143a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800143e:	4aae      	ldr	r2, [pc, #696]	; (80016f8 <main+0x40c>)
 8001440:	671a      	str	r2, [r3, #112]	; 0x70
	  comp_data[27] = 0x014248E8; // +2dB
 8001442:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001446:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800144a:	4aac      	ldr	r2, [pc, #688]	; (80016fc <main+0x410>)
 800144c:	66da      	str	r2, [r3, #108]	; 0x6c
	  comp_data[26] = 0x01699C0F; // +3dB
 800144e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001452:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001456:	4aaa      	ldr	r2, [pc, #680]	; (8001700 <main+0x414>)
 8001458:	669a      	str	r2, [r3, #104]	; 0x68
	  comp_data[25] = 0x0195BB8C; // +4dB
 800145a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800145e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001462:	4aa8      	ldr	r2, [pc, #672]	; (8001704 <main+0x418>)
 8001464:	665a      	str	r2, [r3, #100]	; 0x64
	  comp_data[24] = 0x01C73D51; // +5dB
 8001466:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800146a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800146e:	4aa6      	ldr	r2, [pc, #664]	; (8001708 <main+0x41c>)
 8001470:	661a      	str	r2, [r3, #96]	; 0x60
	  comp_data[23] = 0x02000000; // +6dB
 8001472:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001476:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800147a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800147e:	65da      	str	r2, [r3, #92]	; 0x5c
	  comp_data[22] = 0x023D1CD1; // +7dB
 8001480:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001484:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001488:	4aa0      	ldr	r2, [pc, #640]	; (800170c <main+0x420>)
 800148a:	659a      	str	r2, [r3, #88]	; 0x58
	  comp_data[21] = 0x02830AFD; // +8dB
 800148c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001490:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001494:	4a9e      	ldr	r2, [pc, #632]	; (8001710 <main+0x424>)
 8001496:	655a      	str	r2, [r3, #84]	; 0x54
	  comp_data[20] = 0x02D1818B; // +9dB
 8001498:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800149c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014a0:	4a9c      	ldr	r2, [pc, #624]	; (8001714 <main+0x428>)
 80014a2:	651a      	str	r2, [r3, #80]	; 0x50
	  comp_data[19] = 0x03298B07; // +10dB
 80014a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014ac:	4a9a      	ldr	r2, [pc, #616]	; (8001718 <main+0x42c>)
 80014ae:	64da      	str	r2, [r3, #76]	; 0x4c
	  comp_data[18] = 0x038C5280; // +11dB
 80014b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014b8:	4a98      	ldr	r2, [pc, #608]	; (800171c <main+0x430>)
 80014ba:	649a      	str	r2, [r3, #72]	; 0x48
	  comp_data[17] = 0x03FB2783; // +12dB
 80014bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014c4:	4a96      	ldr	r2, [pc, #600]	; (8001720 <main+0x434>)
 80014c6:	645a      	str	r2, [r3, #68]	; 0x44
	  comp_data[16] = 0x0477828F; // +13dB
 80014c8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014d0:	4a94      	ldr	r2, [pc, #592]	; (8001724 <main+0x438>)
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40
	  comp_data[15] = 0x05030A10; // +14dB
 80014d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014dc:	4a92      	ldr	r2, [pc, #584]	; (8001728 <main+0x43c>)
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
	  comp_data[14] = 0x059F9802; // +15dB
 80014e0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014e8:	4a90      	ldr	r2, [pc, #576]	; (800172c <main+0x440>)
 80014ea:	639a      	str	r2, [r3, #56]	; 0x38
	  comp_data[13] = 0x064F4034; // +16dB
 80014ec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014f4:	4a8e      	ldr	r2, [pc, #568]	; (8001730 <main+0x444>)
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
	  comp_data[12] = 0x07145759; // +17dB
 80014f8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001500:	4a8c      	ldr	r2, [pc, #560]	; (8001734 <main+0x448>)
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
	  comp_data[11] = 0x07F17AF3; // +18dB
 8001504:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001508:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800150c:	4a8a      	ldr	r2, [pc, #552]	; (8001738 <main+0x44c>)
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
	  comp_data[10] = 0x08E99A36; // +19dB
 8001510:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001514:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001518:	4a88      	ldr	r2, [pc, #544]	; (800173c <main+0x450>)
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
	  comp_data[9] = 0x0A000000; // +20dB
 800151c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001520:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001524:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
	  comp_data[8] = 0x0B385E03; // +21dB
 800152a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800152e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001532:	4a83      	ldr	r2, [pc, #524]	; (8001740 <main+0x454>)
 8001534:	621a      	str	r2, [r3, #32]
	  comp_data[7] = 0x0C96D95B; // +22dB
 8001536:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800153a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800153e:	4a81      	ldr	r2, [pc, #516]	; (8001744 <main+0x458>)
 8001540:	61da      	str	r2, [r3, #28]
	  comp_data[6] = 0x0E20189B; // +23dB
 8001542:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001546:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800154a:	4a7f      	ldr	r2, [pc, #508]	; (8001748 <main+0x45c>)
 800154c:	619a      	str	r2, [r3, #24]
	  comp_data[5] = 0x0FD9539A; // +24dB
 800154e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001552:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001556:	4a7d      	ldr	r2, [pc, #500]	; (800174c <main+0x460>)
 8001558:	615a      	str	r2, [r3, #20]
	  comp_data[4] = 0x11C86531; // +25dB
 800155a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800155e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001562:	4a7b      	ldr	r2, [pc, #492]	; (8001750 <main+0x464>)
 8001564:	611a      	str	r2, [r3, #16]
	  comp_data[3] = 0x13F3DF1C; // +26dB
 8001566:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800156a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800156e:	4a79      	ldr	r2, [pc, #484]	; (8001754 <main+0x468>)
 8001570:	60da      	str	r2, [r3, #12]
	  comp_data[2] = 0x16632049; // +27dB
 8001572:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001576:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800157a:	4a77      	ldr	r2, [pc, #476]	; (8001758 <main+0x46c>)
 800157c:	609a      	str	r2, [r3, #8]
	  comp_data[1] = 0x191E6DE4; // +28dB
 800157e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001582:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001586:	4a75      	ldr	r2, [pc, #468]	; (800175c <main+0x470>)
 8001588:	605a      	str	r2, [r3, #4]
	  comp_data[0] = 0x1C2F0F70; // +29dB
 800158a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800158e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001592:	4a73      	ldr	r2, [pc, #460]	; (8001760 <main+0x474>)
 8001594:	601a      	str	r2, [r3, #0]

	  // 8.24 FixPoint
	  boost_data[29] = 0x02800000; // 2.50
 8001596:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800159a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800159e:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 80015a2:	675a      	str	r2, [r3, #116]	; 0x74
	  boost_data[28] = 0x02666666; // 2.40
 80015a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ac:	4a6d      	ldr	r2, [pc, #436]	; (8001764 <main+0x478>)
 80015ae:	671a      	str	r2, [r3, #112]	; 0x70
	  boost_data[27] = 0x02570a3c; // 2.34
 80015b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015b8:	4a6b      	ldr	r2, [pc, #428]	; (8001768 <main+0x47c>)
 80015ba:	66da      	str	r2, [r3, #108]	; 0x6c
	  boost_data[26] = 0x02451eb8; // 2.27
 80015bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015c4:	4a69      	ldr	r2, [pc, #420]	; (800176c <main+0x480>)
 80015c6:	669a      	str	r2, [r3, #104]	; 0x68
	  boost_data[25] = 0x02333332; // 2.20
 80015c8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015d0:	4a67      	ldr	r2, [pc, #412]	; (8001770 <main+0x484>)
 80015d2:	665a      	str	r2, [r3, #100]	; 0x64
	  boost_data[24] = 0x022147ae; // 2.13
 80015d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015dc:	4a65      	ldr	r2, [pc, #404]	; (8001774 <main+0x488>)
 80015de:	661a      	str	r2, [r3, #96]	; 0x60
	  boost_data[23] = 0x020f5c28; // 2.06
 80015e0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015e8:	4a63      	ldr	r2, [pc, #396]	; (8001778 <main+0x48c>)
 80015ea:	65da      	str	r2, [r3, #92]	; 0x5c
	  boost_data[22] = 0x02000000; // 2.00
 80015ec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015f8:	659a      	str	r2, [r3, #88]	; 0x58
	  boost_data[21] = 0x01ee147a; // 1.93
 80015fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001602:	4a5e      	ldr	r2, [pc, #376]	; (800177c <main+0x490>)
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
	  boost_data[20] = 0x01dc28f4; // 1.86
 8001606:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800160a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800160e:	4a5c      	ldr	r2, [pc, #368]	; (8001780 <main+0x494>)
 8001610:	651a      	str	r2, [r3, #80]	; 0x50
	  boost_data[19] = 0x01ca3d70; // 1.79
 8001612:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001616:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800161a:	4a5a      	ldr	r2, [pc, #360]	; (8001784 <main+0x498>)
 800161c:	64da      	str	r2, [r3, #76]	; 0x4c
	  boost_data[18] = 0x01b851ea; // 1.72
 800161e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001622:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001626:	4a58      	ldr	r2, [pc, #352]	; (8001788 <main+0x49c>)
 8001628:	649a      	str	r2, [r3, #72]	; 0x48
	  boost_data[17] = 0x01a8f5c2; // 1.66
 800162a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800162e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001632:	4a56      	ldr	r2, [pc, #344]	; (800178c <main+0x4a0>)
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
	  boost_data[16] = 0x01970a3c; // 1.59
 8001636:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800163a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800163e:	4a54      	ldr	r2, [pc, #336]	; (8001790 <main+0x4a4>)
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
	  boost_data[15] = 0x01851eb8; // 1.52
 8001642:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001646:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800164a:	4a52      	ldr	r2, [pc, #328]	; (8001794 <main+0x4a8>)
 800164c:	63da      	str	r2, [r3, #60]	; 0x3c
	  boost_data[14] = 0x01733332; // 1.45
 800164e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001652:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001656:	4a50      	ldr	r2, [pc, #320]	; (8001798 <main+0x4ac>)
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
	  boost_data[13] = 0x016147ae; // 1.38
 800165a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800165e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001662:	4a4e      	ldr	r2, [pc, #312]	; (800179c <main+0x4b0>)
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
	  boost_data[12] = 0x0151eb84; // 1.32
 8001666:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800166a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800166e:	4a4c      	ldr	r2, [pc, #304]	; (80017a0 <main+0x4b4>)
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
	  boost_data[11] = 0x01400000; // 1.25
 8001672:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001676:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800167a:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001680:	e090      	b.n	80017a4 <main+0x4b8>
 8001682:	bf00      	nop
 8001684:	00e42904 	.word	0x00e42904
 8001688:	00cb5918 	.word	0x00cb5918
 800168c:	00b53bee 	.word	0x00b53bee
 8001690:	00a1866a 	.word	0x00a1866a
 8001694:	008ff598 	.word	0x008ff598
 8001698:	00804dce 	.word	0x00804dce
 800169c:	006fbf80 	.word	0x006fbf80
 80016a0:	0065ea58 	.word	0x0065ea58
 80016a4:	005ad50c 	.word	0x005ad50c
 80016a8:	0050f44c 	.word	0x0050f44c
 80016ac:	0048268c 	.word	0x0048268c
 80016b0:	00404de6 	.word	0x00404de6
 80016b4:	00394fae 	.word	0x00394fae
 80016b8:	00331426 	.word	0x00331426
 80016bc:	002d8620 	.word	0x002d8620
 80016c0:	002892c0 	.word	0x002892c0
 80016c4:	00242934 	.word	0x00242934
 80016c8:	00203a7e 	.word	0x00203a7e
 80016cc:	001cb942 	.word	0x001cb942
 80016d0:	00199998 	.word	0x00199998
 80016d4:	0016d0e6 	.word	0x0016d0e6
 80016d8:	001455b4 	.word	0x001455b4
 80016dc:	00121f96 	.word	0x00121f96
 80016e0:	0010270a 	.word	0x0010270a
 80016e4:	000e655c 	.word	0x000e655c
 80016e8:	000cd494 	.word	0x000cd494
 80016ec:	000b6f62 	.word	0x000b6f62
 80016f0:	000a3108 	.word	0x000a3108
 80016f4:	0009154e 	.word	0x0009154e
 80016f8:	011f3b64 	.word	0x011f3b64
 80016fc:	014248e8 	.word	0x014248e8
 8001700:	01699c0f 	.word	0x01699c0f
 8001704:	0195bb8c 	.word	0x0195bb8c
 8001708:	01c73d51 	.word	0x01c73d51
 800170c:	023d1cd1 	.word	0x023d1cd1
 8001710:	02830afd 	.word	0x02830afd
 8001714:	02d1818b 	.word	0x02d1818b
 8001718:	03298b07 	.word	0x03298b07
 800171c:	038c5280 	.word	0x038c5280
 8001720:	03fb2783 	.word	0x03fb2783
 8001724:	0477828f 	.word	0x0477828f
 8001728:	05030a10 	.word	0x05030a10
 800172c:	059f9802 	.word	0x059f9802
 8001730:	064f4034 	.word	0x064f4034
 8001734:	07145759 	.word	0x07145759
 8001738:	07f17af3 	.word	0x07f17af3
 800173c:	08e99a36 	.word	0x08e99a36
 8001740:	0b385e03 	.word	0x0b385e03
 8001744:	0c96d95b 	.word	0x0c96d95b
 8001748:	0e20189b 	.word	0x0e20189b
 800174c:	0fd9539a 	.word	0x0fd9539a
 8001750:	11c86531 	.word	0x11c86531
 8001754:	13f3df1c 	.word	0x13f3df1c
 8001758:	16632049 	.word	0x16632049
 800175c:	191e6de4 	.word	0x191e6de4
 8001760:	1c2f0f70 	.word	0x1c2f0f70
 8001764:	02666666 	.word	0x02666666
 8001768:	02570a3c 	.word	0x02570a3c
 800176c:	02451eb8 	.word	0x02451eb8
 8001770:	02333332 	.word	0x02333332
 8001774:	022147ae 	.word	0x022147ae
 8001778:	020f5c28 	.word	0x020f5c28
 800177c:	01ee147a 	.word	0x01ee147a
 8001780:	01dc28f4 	.word	0x01dc28f4
 8001784:	01ca3d70 	.word	0x01ca3d70
 8001788:	01b851ea 	.word	0x01b851ea
 800178c:	01a8f5c2 	.word	0x01a8f5c2
 8001790:	01970a3c 	.word	0x01970a3c
 8001794:	01851eb8 	.word	0x01851eb8
 8001798:	01733332 	.word	0x01733332
 800179c:	016147ae 	.word	0x016147ae
 80017a0:	0151eb84 	.word	0x0151eb84
	  boost_data[10] = 0x012e147a; // 1.18
 80017a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017ac:	4ab8      	ldr	r2, [pc, #736]	; (8001a90 <main+0x7a4>)
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
	  boost_data[9] =  0x011c28f4; // 1.11
 80017b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017b8:	4ab6      	ldr	r2, [pc, #728]	; (8001a94 <main+0x7a8>)
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
	  boost_data[8] =  0x010a3d70; // 1.04
 80017bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017c4:	4ab4      	ldr	r2, [pc, #720]	; (8001a98 <main+0x7ac>)
 80017c6:	621a      	str	r2, [r3, #32]
	  boost_data[7] =  0x00fae146; // 0.98
 80017c8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017d0:	4ab2      	ldr	r2, [pc, #712]	; (8001a9c <main+0x7b0>)
 80017d2:	61da      	str	r2, [r3, #28]
	  boost_data[6] =  0x00e8f5c2; // 0.91
 80017d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017dc:	4ab0      	ldr	r2, [pc, #704]	; (8001aa0 <main+0x7b4>)
 80017de:	619a      	str	r2, [r3, #24]
	  boost_data[5] =  0x00d70a3c; // 0.84
 80017e0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017e8:	4aae      	ldr	r2, [pc, #696]	; (8001aa4 <main+0x7b8>)
 80017ea:	615a      	str	r2, [r3, #20]
	  boost_data[4] =  0x00c51eb8; // 0.77
 80017ec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017f4:	4aac      	ldr	r2, [pc, #688]	; (8001aa8 <main+0x7bc>)
 80017f6:	611a      	str	r2, [r3, #16]
	  boost_data[3] =  0x00b33332; // 0.70
 80017f8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001800:	4aaa      	ldr	r2, [pc, #680]	; (8001aac <main+0x7c0>)
 8001802:	60da      	str	r2, [r3, #12]
	  boost_data[2] =  0x00a3d70a; // 0.64
 8001804:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001808:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800180c:	4aa8      	ldr	r2, [pc, #672]	; (8001ab0 <main+0x7c4>)
 800180e:	609a      	str	r2, [r3, #8]
	  boost_data[1] =  0x0091eb84; // 0.57
 8001810:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001814:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001818:	4aa6      	ldr	r2, [pc, #664]	; (8001ab4 <main+0x7c8>)
 800181a:	605a      	str	r2, [r3, #4]
	  boost_data[0] =  0x00800000; // 0.50
 800181c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001820:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001824:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001828:	601a      	str	r2, [r3, #0]

	  for(k=0; k<30; k++)
 800182a:	2300      	movs	r3, #0
 800182c:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 8001830:	e04e      	b.n	80018d0 <main+0x5e4>
	  {
		  log_in_table[k] = 4096.0*log10(1.0+(3.0*k/10.0));
 8001832:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe20 	bl	800047c <__aeabi_i2d>
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b9d      	ldr	r3, [pc, #628]	; (8001ab8 <main+0x7cc>)
 8001842:	f7fe fe85 	bl	8000550 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b9a      	ldr	r3, [pc, #616]	; (8001abc <main+0x7d0>)
 8001854:	f7fe ffa6 	bl	80007a4 <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b96      	ldr	r3, [pc, #600]	; (8001ac0 <main+0x7d4>)
 8001866:	f7fe fcbd 	bl	80001e4 <__adddf3>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	ec43 2b17 	vmov	d7, r2, r3
 8001872:	eeb0 0a47 	vmov.f32	s0, s14
 8001876:	eef0 0a67 	vmov.f32	s1, s15
 800187a:	f004 f93d 	bl	8005af8 <log10>
 800187e:	ec51 0b10 	vmov	r0, r1, d0
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	4b8f      	ldr	r3, [pc, #572]	; (8001ac4 <main+0x7d8>)
 8001888:	f7fe fe62 	bl	8000550 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	f8b7 418e 	ldrh.w	r4, [r7, #398]	; 0x18e
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f90a 	bl	8000ab0 <__aeabi_d2uiz>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b89      	ldr	r3, [pc, #548]	; (8001ac8 <main+0x7dc>)
 80018a2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  linear_in_table[k] = 4096*k/30;
 80018a6:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 80018aa:	031b      	lsls	r3, r3, #12
 80018ac:	4a87      	ldr	r2, [pc, #540]	; (8001acc <main+0x7e0>)
 80018ae:	fb82 1203 	smull	r1, r2, r2, r3
 80018b2:	441a      	add	r2, r3
 80018b4:	1112      	asrs	r2, r2, #4
 80018b6:	17db      	asrs	r3, r3, #31
 80018b8:	1ad2      	subs	r2, r2, r3
 80018ba:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 80018be:	b291      	uxth	r1, r2
 80018c0:	4a83      	ldr	r2, [pc, #524]	; (8001ad0 <main+0x7e4>)
 80018c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(k=0; k<30; k++)
 80018c6:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 80018ca:	3301      	adds	r3, #1
 80018cc:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 80018d0:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 80018d4:	2b1d      	cmp	r3, #29
 80018d6:	d9ac      	bls.n	8001832 <main+0x546>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d8:	f001 faa4 	bl	8002e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018dc:	f000 fb54 	bl	8001f88 <SystemClock_Config>
//  MX_I2C3_Init();
//  MX_TIM2_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e0:	f000 fe18 	bl	8002514 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e4:	f000 fdf6 	bl	80024d4 <MX_DMA_Init>
  MX_I2C2_Init();
 80018e8:	f000 fcfe 	bl	80022e8 <MX_I2C2_Init>
  MX_I2C3_Init();
 80018ec:	f000 fd2a 	bl	8002344 <MX_I2C3_Init>
  MX_ADC1_Init();
 80018f0:	f000 fbb6 	bl	8002060 <MX_ADC1_Init>
  MX_I2C1_Init();
 80018f4:	f000 fcca 	bl	800228c <MX_I2C1_Init>
  MX_TIM2_Init();
 80018f8:	f000 fd52 	bl	80023a0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80018fc:	f000 fd9e 	bl	800243c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8001900:	4874      	ldr	r0, [pc, #464]	; (8001ad4 <main+0x7e8>)
 8001902:	f003 fe1d 	bl	8005540 <HAL_TIM_Base_Start>
  // Disable DSP
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190c:	4872      	ldr	r0, [pc, #456]	; (8001ad8 <main+0x7ec>)
 800190e:	f002 fd0d 	bl	800432c <HAL_GPIO_WritePin>

  // Disable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001918:	486f      	ldr	r0, [pc, #444]	; (8001ad8 <main+0x7ec>)
 800191a:	f002 fd07 	bl	800432c <HAL_GPIO_WritePin>

  // Configure Sampling Rate SR = Standard => 0
  //							  Double   => 1
  HAL_GPIO_WritePin(SR_GPIO_Port, SR_Pin, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001924:	486d      	ldr	r0, [pc, #436]	; (8001adc <main+0x7f0>)
 8001926:	f002 fd01 	bl	800432c <HAL_GPIO_WritePin>
  // Configure System Clock SCKO1 CSEL = 0 (default)
  HAL_GPIO_WritePin(CSEL_GPIO_Port, CSEL_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001930:	486a      	ldr	r0, [pc, #424]	; (8001adc <main+0x7f0>)
 8001932:	f002 fcfb 	bl	800432c <HAL_GPIO_WritePin>
  // Configure Sampling Frequency Group = 32KHz => 10
  HAL_GPIO_WritePin(FS2_GPIO_Port, FS2_Pin, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193c:	4867      	ldr	r0, [pc, #412]	; (8001adc <main+0x7f0>)
 800193e:	f002 fcf5 	bl	800432c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FS1_GPIO_Port, FS1_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001948:	4864      	ldr	r0, [pc, #400]	; (8001adc <main+0x7f0>)
 800194a:	f002 fcef 	bl	800432c <HAL_GPIO_WritePin>

  // Enable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001954:	4860      	ldr	r0, [pc, #384]	; (8001ad8 <main+0x7ec>)
 8001956:	f002 fce9 	bl	800432c <HAL_GPIO_WritePin>

  HAL_Delay(500);
 800195a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195e:	f001 fad3 	bl	8002f08 <HAL_Delay>

  // Configure DAC format to I2S 16-24 bit, slow roll-off
  auxData[0] = 0b00000100;
 8001962:	4b5f      	ldr	r3, [pc, #380]	; (8001ae0 <main+0x7f4>)
 8001964:	2204      	movs	r2, #4
 8001966:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <main+0x7f4>)
 800196a:	2200      	movs	r2, #0
 800196c:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x09, 1, auxData, 1, 1000);
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	9302      	str	r3, [sp, #8]
 8001974:	2301      	movs	r3, #1
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <main+0x7f4>)
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2301      	movs	r3, #1
 800197e:	2209      	movs	r2, #9
 8001980:	2198      	movs	r1, #152	; 0x98
 8001982:	4858      	ldr	r0, [pc, #352]	; (8001ae4 <main+0x7f8>)
 8001984:	f002 fe30 	bl	80045e8 <HAL_I2C_Mem_Write>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <main+0x7fc>)
 800198e:	701a      	strb	r2, [r3, #0]

  auxData[0] = 0b00101001;
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <main+0x7f4>)
 8001992:	2229      	movs	r2, #41	; 0x29
 8001994:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 8001996:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <main+0x7f4>)
 8001998:	2200      	movs	r2, #0
 800199a:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x0A, 1, auxData, 1, 1000);
 800199c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2301      	movs	r3, #1
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	4b4e      	ldr	r3, [pc, #312]	; (8001ae0 <main+0x7f4>)
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2301      	movs	r3, #1
 80019ac:	220a      	movs	r2, #10
 80019ae:	2198      	movs	r1, #152	; 0x98
 80019b0:	484c      	ldr	r0, [pc, #304]	; (8001ae4 <main+0x7f8>)
 80019b2:	f002 fe19 	bl	80045e8 <HAL_I2C_Mem_Write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <main+0x7fc>)
 80019bc:	701a      	strb	r2, [r3, #0]

  // Configure DAC over-sampling wide, sharp roll-off
  auxData[0] = 0b10000000;
 80019be:	4b48      	ldr	r3, [pc, #288]	; (8001ae0 <main+0x7f4>)
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 80019c4:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <main+0x7f4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x0C, 1, auxData, 1, 1000);
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	2301      	movs	r3, #1
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <main+0x7f4>)
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2301      	movs	r3, #1
 80019da:	220c      	movs	r2, #12
 80019dc:	2198      	movs	r1, #152	; 0x98
 80019de:	4841      	ldr	r0, [pc, #260]	; (8001ae4 <main+0x7f8>)
 80019e0:	f002 fe02 	bl	80045e8 <HAL_I2C_Mem_Write>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b3f      	ldr	r3, [pc, #252]	; (8001ae8 <main+0x7fc>)
 80019ea:	701a      	strb	r2, [r3, #0]

  // Enable DSP
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f2:	4839      	ldr	r0, [pc, #228]	; (8001ad8 <main+0x7ec>)
 80019f4:	f002 fc9a 	bl	800432c <HAL_GPIO_WritePin>

  HAL_Delay(100);
 80019f8:	2064      	movs	r0, #100	; 0x64
 80019fa:	f001 fa85 	bl	8002f08 <HAL_Delay>

  default_download_IC_1();
 80019fe:	f7ff f9f5 	bl	8000dec <default_download_IC_1>
  HAL_Delay(500);
 8001a02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a06:	f001 fa7f 	bl	8002f08 <HAL_Delay>
//
//  stat = HAL_I2C_Mem_Write(&hi2c1, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);
//  stat = HAL_I2C_Mem_Write(&hi2c2, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);
//  stat = HAL_I2C_Mem_Write(&hi2c3, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);

  for(k=0; k<ADC_POT; k++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 8001a10:	e00a      	b.n	8001a28 <main+0x73c>
  {
	  flag[k] = 1;
 8001a12:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001a16:	4a35      	ldr	r2, [pc, #212]	; (8001aec <main+0x800>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(k=0; k<ADC_POT; k++)
 8001a1e:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001a22:	3301      	adds	r3, #1
 8001a24:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 8001a28:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001a2c:	2b0e      	cmp	r3, #14
 8001a2e:	d9f0      	bls.n	8001a12 <main+0x726>
  }

  HAL_TIM_Base_Start(&htim2);
 8001a30:	482f      	ldr	r0, [pc, #188]	; (8001af0 <main+0x804>)
 8001a32:	f003 fd85 	bl	8005540 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8001a36:	220f      	movs	r2, #15
 8001a38:	492e      	ldr	r1, [pc, #184]	; (8001af4 <main+0x808>)
 8001a3a:	482f      	ldr	r0, [pc, #188]	; (8001af8 <main+0x80c>)
 8001a3c:	f001 facc 	bl	8002fd8 <HAL_ADC_Start_DMA>

  HAL_Delay(3000);
 8001a40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a44:	f001 fa60 	bl	8002f08 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  data_SafeLoad[2] = 0x00;
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <main+0x810>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0x00;
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <main+0x810>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0x00;
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <main+0x810>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]

	  address_SafeLoad[1] = 0x00;
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <main+0x814>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	705a      	strb	r2, [r3, #1]
	  address_SafeLoad[0] = 0x00;
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <main+0x814>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]

	  num_SafeLoad[3] = 0x01;
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <main+0x818>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	70da      	strb	r2, [r3, #3]
 	  num_SafeLoad[2] = 0x00;
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <main+0x818>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	709a      	strb	r2, [r3, #2]
	  num_SafeLoad[1] = 0x00;
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <main+0x818>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	705a      	strb	r2, [r3, #1]
	  num_SafeLoad[0] = 0x00;
 8001a78:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <main+0x818>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]

	  if(update == 1)
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <main+0x81c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d1e0      	bne.n	8001a48 <main+0x75c>
	  {
		  for(k=0; k<VOL_ARRAY; k++) // Filters 32Hz - 16KHz + Subwoofer
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 8001a8c:	e08b      	b.n	8001ba6 <main+0x8ba>
 8001a8e:	bf00      	nop
 8001a90:	012e147a 	.word	0x012e147a
 8001a94:	011c28f4 	.word	0x011c28f4
 8001a98:	010a3d70 	.word	0x010a3d70
 8001a9c:	00fae146 	.word	0x00fae146
 8001aa0:	00e8f5c2 	.word	0x00e8f5c2
 8001aa4:	00d70a3c 	.word	0x00d70a3c
 8001aa8:	00c51eb8 	.word	0x00c51eb8
 8001aac:	00b33332 	.word	0x00b33332
 8001ab0:	00a3d70a 	.word	0x00a3d70a
 8001ab4:	0091eb84 	.word	0x0091eb84
 8001ab8:	40080000 	.word	0x40080000
 8001abc:	40240000 	.word	0x40240000
 8001ac0:	3ff00000 	.word	0x3ff00000
 8001ac4:	40b00000 	.word	0x40b00000
 8001ac8:	200042d8 	.word	0x200042d8
 8001acc:	88888889 	.word	0x88888889
 8001ad0:	20004314 	.word	0x20004314
 8001ad4:	2000422c 	.word	0x2000422c
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	20004278 	.word	0x20004278
 8001ae4:	20004190 	.word	0x20004190
 8001ae8:	20004274 	.word	0x20004274
 8001aec:	20004350 	.word	0x20004350
 8001af0:	200041e4 	.word	0x200041e4
 8001af4:	2000427c 	.word	0x2000427c
 8001af8:	20004040 	.word	0x20004040
 8001afc:	20004370 	.word	0x20004370
 8001b00:	20004374 	.word	0x20004374
 8001b04:	20004378 	.word	0x20004378
 8001b08:	2000436e 	.word	0x2000436e
		  {
			  if(flag[k] == 1)
 8001b0c:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b10:	4acb      	ldr	r2, [pc, #812]	; (8001e40 <main+0xb54>)
 8001b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d140      	bne.n	8001b9c <main+0x8b0>
			  {
				  flag[k] = 0;
 8001b1a:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b1e:	4ac8      	ldr	r2, [pc, #800]	; (8001e40 <main+0xb54>)
 8001b20:	2100      	movs	r1, #0
 8001b22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  data_SafeLoad[3] = 29 - pote[k];
 8001b26:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b2a:	4ac6      	ldr	r2, [pc, #792]	; (8001e44 <main+0xb58>)
 8001b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f1c3 031d 	rsb	r3, r3, #29
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4bc3      	ldr	r3, [pc, #780]	; (8001e48 <main+0xb5c>)
 8001b3a:	70da      	strb	r2, [r3, #3]
				  address_SafeLoad[3] = 0xFF & (BandAddress[k]);
 8001b3c:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001b46:	443b      	add	r3, r7
 8001b48:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4bbf      	ldr	r3, [pc, #764]	; (8001e4c <main+0xb60>)
 8001b50:	70da      	strb	r2, [r3, #3]
				  address_SafeLoad[2] = 0xFF & ((BandAddress[k])>>8);
 8001b52:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001b5c:	443b      	add	r3, r7
 8001b5e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4bb8      	ldr	r3, [pc, #736]	; (8001e4c <main+0xb60>)
 8001b6a:	709a      	strb	r2, [r3, #2]
				  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8001b6c:	4bb6      	ldr	r3, [pc, #728]	; (8001e48 <main+0xb5c>)
 8001b6e:	2204      	movs	r2, #4
 8001b70:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001b74:	2070      	movs	r0, #112	; 0x70
 8001b76:	f000 fd6f 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
				  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8001b7a:	4bb4      	ldr	r3, [pc, #720]	; (8001e4c <main+0xb60>)
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	f246 0105 	movw	r1, #24581	; 0x6005
 8001b82:	2070      	movs	r0, #112	; 0x70
 8001b84:	f000 fd68 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
				  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8001b88:	4bb1      	ldr	r3, [pc, #708]	; (8001e50 <main+0xb64>)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	f246 0106 	movw	r1, #24582	; 0x6006
 8001b90:	2070      	movs	r0, #112	; 0x70
 8001b92:	f000 fd61 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
				  delay_us(100);
 8001b96:	2064      	movs	r0, #100	; 0x64
 8001b98:	f000 fec2 	bl	8002920 <delay_us>
		  for(k=0; k<VOL_ARRAY; k++) // Filters 32Hz - 16KHz + Subwoofer
 8001b9c:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 8001ba6:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001baa:	2b0a      	cmp	r3, #10
 8001bac:	d9ae      	bls.n	8001b0c <main+0x820>
			  }

		  }

		  if(flag[VOL_ARRAY] == 1)
 8001bae:	4ba4      	ldr	r3, [pc, #656]	; (8001e40 <main+0xb54>)
 8001bb0:	8adb      	ldrh	r3, [r3, #22]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d15b      	bne.n	8001c6e <main+0x982>
		  {
			  flag[VOL_ARRAY] = 0;
 8001bb6:	4ba2      	ldr	r3, [pc, #648]	; (8001e40 <main+0xb54>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	82da      	strh	r2, [r3, #22]
			  pote_aux = 29 - pote[VOL_ARRAY];
 8001bbc:	4ba1      	ldr	r3, [pc, #644]	; (8001e44 <main+0xb58>)
 8001bbe:	8adb      	ldrh	r3, [r3, #22]
 8001bc0:	f1c3 031d 	rsb	r3, r3, #29
 8001bc4:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c

			  data_SafeLoad[3] = 0xFF & (vol_data[pote_aux]);
 8001bc8:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001bd2:	443b      	add	r3, r7
 8001bd4:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b9b      	ldr	r3, [pc, #620]	; (8001e48 <main+0xb5c>)
 8001bdc:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((vol_data[pote_aux])>>8);
 8001bde:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001be8:	443b      	add	r3, r7
 8001bea:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b95      	ldr	r3, [pc, #596]	; (8001e48 <main+0xb5c>)
 8001bf4:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001bf6:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001c00:	443b      	add	r3, r7
 8001c02:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001c06:	0c1b      	lsrs	r3, r3, #16
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b8f      	ldr	r3, [pc, #572]	; (8001e48 <main+0xb5c>)
 8001c0c:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001c0e:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001c18:	443b      	add	r3, r7
 8001c1a:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001c1e:	0e1b      	lsrs	r3, r3, #24
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b89      	ldr	r3, [pc, #548]	; (8001e48 <main+0xb5c>)
 8001c24:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[VOL_ARRAY]);
 8001c26:	f8b7 3182 	ldrh.w	r3, [r7, #386]	; 0x182
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <main+0xb60>)
 8001c2e:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[VOL_ARRAY])>>8);
 8001c30:	f8b7 3182 	ldrh.w	r3, [r7, #386]	; 0x182
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b84      	ldr	r3, [pc, #528]	; (8001e4c <main+0xb60>)
 8001c3c:	709a      	strb	r2, [r3, #2]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8001c3e:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <main+0xb5c>)
 8001c40:	2204      	movs	r2, #4
 8001c42:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001c46:	2070      	movs	r0, #112	; 0x70
 8001c48:	f000 fd06 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8001c4c:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <main+0xb60>)
 8001c4e:	2204      	movs	r2, #4
 8001c50:	f246 0105 	movw	r1, #24581	; 0x6005
 8001c54:	2070      	movs	r0, #112	; 0x70
 8001c56:	f000 fcff 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8001c5a:	4b7d      	ldr	r3, [pc, #500]	; (8001e50 <main+0xb64>)
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	f246 0106 	movw	r1, #24582	; 0x6006
 8001c62:	2070      	movs	r0, #112	; 0x70
 8001c64:	f000 fcf8 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  delay_us(100);
 8001c68:	2064      	movs	r0, #100	; 0x64
 8001c6a:	f000 fe59 	bl	8002920 <delay_us>
		  }

		  if(flag[LOUD_LOW_ARRAY] == 1)
 8001c6e:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <main+0xb54>)
 8001c70:	8b1b      	ldrh	r3, [r3, #24]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d15b      	bne.n	8001d2e <main+0xa42>
		  {
			  flag[LOUD_LOW_ARRAY] = 0;
 8001c76:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <main+0xb54>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	831a      	strh	r2, [r3, #24]
			  pote_aux = 29 - pote[LOUD_LOW_ARRAY];
 8001c7c:	4b71      	ldr	r3, [pc, #452]	; (8001e44 <main+0xb58>)
 8001c7e:	8b1b      	ldrh	r3, [r3, #24]
 8001c80:	f1c3 031d 	rsb	r3, r3, #29
 8001c84:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c

			  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 8001c88:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001c8c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <main+0xb5c>)
 8001c9c:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8001c9e:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001ca2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ca6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <main+0xb5c>)
 8001cb4:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001cb6:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001cba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001cbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc6:	0c1b      	lsrs	r3, r3, #16
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <main+0xb5c>)
 8001ccc:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001cce:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001cd2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001cd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cde:	0e1b      	lsrs	r3, r3, #24
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <main+0xb5c>)
 8001ce4:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_LOW_ARRAY]);
 8001ce6:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <main+0xb60>)
 8001cee:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_LOW_ARRAY])>>8);
 8001cf0:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <main+0xb60>)
 8001cfc:	709a      	strb	r2, [r3, #2]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8001cfe:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <main+0xb5c>)
 8001d00:	2204      	movs	r2, #4
 8001d02:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001d06:	2070      	movs	r0, #112	; 0x70
 8001d08:	f000 fca6 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8001d0c:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <main+0xb60>)
 8001d0e:	2204      	movs	r2, #4
 8001d10:	f246 0105 	movw	r1, #24581	; 0x6005
 8001d14:	2070      	movs	r0, #112	; 0x70
 8001d16:	f000 fc9f 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8001d1a:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <main+0xb64>)
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	f246 0106 	movw	r1, #24582	; 0x6006
 8001d22:	2070      	movs	r0, #112	; 0x70
 8001d24:	f000 fc98 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  delay_us(100);
 8001d28:	2064      	movs	r0, #100	; 0x64
 8001d2a:	f000 fdf9 	bl	8002920 <delay_us>
		  }

		  if(flag[LOUD_HIGH_ARRAY] == 1)
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <main+0xb54>)
 8001d30:	8b5b      	ldrh	r3, [r3, #26]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d15b      	bne.n	8001dee <main+0xb02>
		  {
			  flag[LOUD_HIGH_ARRAY] = 0;
 8001d36:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <main+0xb54>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	835a      	strh	r2, [r3, #26]
			  pote_aux = 29 - pote[LOUD_HIGH_ARRAY];
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <main+0xb58>)
 8001d3e:	8b5b      	ldrh	r3, [r3, #26]
 8001d40:	f1c3 031d 	rsb	r3, r3, #29
 8001d44:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c

			  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 8001d48:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001d4c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d50:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <main+0xb5c>)
 8001d5c:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8001d5e:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001d62:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <main+0xb5c>)
 8001d74:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001d76:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001d7a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	0c1b      	lsrs	r3, r3, #16
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <main+0xb5c>)
 8001d8c:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001d8e:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001d92:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9e:	0e1b      	lsrs	r3, r3, #24
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <main+0xb5c>)
 8001da4:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_HIGH_ARRAY]);
 8001da6:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <main+0xb60>)
 8001dae:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_HIGH_ARRAY])>>8);
 8001db0:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <main+0xb60>)
 8001dbc:	709a      	strb	r2, [r3, #2]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <main+0xb5c>)
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001dc6:	2070      	movs	r0, #112	; 0x70
 8001dc8:	f000 fc46 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <main+0xb60>)
 8001dce:	2204      	movs	r2, #4
 8001dd0:	f246 0105 	movw	r1, #24581	; 0x6005
 8001dd4:	2070      	movs	r0, #112	; 0x70
 8001dd6:	f000 fc3f 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <main+0xb64>)
 8001ddc:	2204      	movs	r2, #4
 8001dde:	f246 0106 	movw	r1, #24582	; 0x6006
 8001de2:	2070      	movs	r0, #112	; 0x70
 8001de4:	f000 fc38 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  delay_us(100);
 8001de8:	2064      	movs	r0, #100	; 0x64
 8001dea:	f000 fd99 	bl	8002920 <delay_us>
		  }

		  if(flag[LOUD_GRL_ARRAY] == 1)
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <main+0xb54>)
 8001df0:	8b9b      	ldrh	r3, [r3, #28]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	f040 80b2 	bne.w	8001f5c <main+0xc70>
		  {
			  flag[LOUD_GRL_ARRAY] = 0;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <main+0xb54>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	839a      	strh	r2, [r3, #28]
			  pote_aux = pote[LOUD_GRL_ARRAY];
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <main+0xb58>)
 8001e00:	8b9b      	ldrh	r3, [r3, #28]
 8001e02:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c

			  data_SafeLoad[3] = 0xFF & (vol_data[pote_aux]);
 8001e06:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001e10:	443b      	add	r3, r7
 8001e12:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <main+0xb5c>)
 8001e1a:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((vol_data[pote_aux])>>8);
 8001e1c:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001e26:	443b      	add	r3, r7
 8001e28:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <main+0xb5c>)
 8001e32:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001e34:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001e3e:	e009      	b.n	8001e54 <main+0xb68>
 8001e40:	20004350 	.word	0x20004350
 8001e44:	200042b8 	.word	0x200042b8
 8001e48:	20004370 	.word	0x20004370
 8001e4c:	20004374 	.word	0x20004374
 8001e50:	20004378 	.word	0x20004378
 8001e54:	443b      	add	r3, r7
 8001e56:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e5a:	0c1b      	lsrs	r3, r3, #16
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <main+0xc84>)
 8001e60:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001e62:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001e6c:	443b      	add	r3, r7
 8001e6e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <main+0xc84>)
 8001e78:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_GRL_ARRAY]);
 8001e7a:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <main+0xc88>)
 8001e82:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_GRL_ARRAY])>>8);
 8001e84:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <main+0xc88>)
 8001e90:	709a      	strb	r2, [r3, #2]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8001e92:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <main+0xc84>)
 8001e94:	2204      	movs	r2, #4
 8001e96:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001e9a:	2070      	movs	r0, #112	; 0x70
 8001e9c:	f000 fbdc 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8001ea0:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <main+0xc88>)
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	f246 0105 	movw	r1, #24581	; 0x6005
 8001ea8:	2070      	movs	r0, #112	; 0x70
 8001eaa:	f000 fbd5 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <main+0xc8c>)
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	f246 0106 	movw	r1, #24582	; 0x6006
 8001eb6:	2070      	movs	r0, #112	; 0x70
 8001eb8:	f000 fbce 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  delay_us(100);
 8001ebc:	2064      	movs	r0, #100	; 0x64
 8001ebe:	f000 fd2f 	bl	8002920 <delay_us>

			  data_SafeLoad[3] = 0xFF & (comp_data[pote_aux]);
 8001ec2:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001ec6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001eca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <main+0xc84>)
 8001ed6:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((comp_data[pote_aux])>>8);
 8001ed8:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001edc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ee0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <main+0xc84>)
 8001eee:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((comp_data[pote_aux])>>16);
 8001ef0:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001ef4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ef8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <main+0xc84>)
 8001f06:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((comp_data[pote_aux])>>24);
 8001f08:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001f0c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f10:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f18:	0e1b      	lsrs	r3, r3, #24
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <main+0xc84>)
 8001f1e:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (MOD_LOUDCOMP_GAINALGNS145X2GAIN_ADDR);
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <main+0xc88>)
 8001f22:	22d8      	movs	r2, #216	; 0xd8
 8001f24:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((MOD_LOUDCOMP_GAINALGNS145X2GAIN_ADDR)>>8);
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <main+0xc88>)
 8001f28:	2206      	movs	r2, #6
 8001f2a:	709a      	strb	r2, [r3, #2]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <main+0xc84>)
 8001f2e:	2204      	movs	r2, #4
 8001f30:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001f34:	2070      	movs	r0, #112	; 0x70
 8001f36:	f000 fb8f 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <main+0xc88>)
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	f246 0105 	movw	r1, #24581	; 0x6005
 8001f42:	2070      	movs	r0, #112	; 0x70
 8001f44:	f000 fb88 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <main+0xc8c>)
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	f246 0106 	movw	r1, #24582	; 0x6006
 8001f50:	2070      	movs	r0, #112	; 0x70
 8001f52:	f000 fb81 	bl	8002658 <SIGMA_WRITE_REGISTER_BLOCK>
			  delay_us(100);
 8001f56:	2064      	movs	r0, #100	; 0x64
 8001f58:	f000 fce2 	bl	8002920 <delay_us>
		  }

		  update = 0;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <main+0xc90>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8001f62:	220f      	movs	r2, #15
 8001f64:	4906      	ldr	r1, [pc, #24]	; (8001f80 <main+0xc94>)
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <main+0xc98>)
 8001f68:	f001 f836 	bl	8002fd8 <HAL_ADC_Start_DMA>
	  data_SafeLoad[2] = 0x00;
 8001f6c:	e56c      	b.n	8001a48 <main+0x75c>
 8001f6e:	bf00      	nop
 8001f70:	20004370 	.word	0x20004370
 8001f74:	20004374 	.word	0x20004374
 8001f78:	20004378 	.word	0x20004378
 8001f7c:	2000436e 	.word	0x2000436e
 8001f80:	2000427c 	.word	0x2000427c
 8001f84:	20004040 	.word	0x20004040

08001f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b094      	sub	sp, #80	; 0x50
 8001f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f8e:	f107 0320 	add.w	r3, r7, #32
 8001f92:	2230      	movs	r2, #48	; 0x30
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fd7c 	bl	8005a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <SystemClock_Config+0xd0>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a28      	ldr	r2, [pc, #160]	; (8002058 <SystemClock_Config+0xd0>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b26      	ldr	r3, [pc, #152]	; (8002058 <SystemClock_Config+0xd0>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <SystemClock_Config+0xd4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <SystemClock_Config+0xd4>)
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <SystemClock_Config+0xd4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001fec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 27;
 8001ffc:	231b      	movs	r3, #27
 8001ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002000:	23a0      	movs	r3, #160	; 0xa0
 8002002:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002004:	2302      	movs	r3, #2
 8002006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002008:	2304      	movs	r3, #4
 800200a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200c:	f107 0320 	add.w	r3, r7, #32
 8002010:	4618      	mov	r0, r3
 8002012:	f002 fe01 	bl	8004c18 <HAL_RCC_OscConfig>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800201c:	f000 fc9a 	bl	8002954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002020:	230f      	movs	r3, #15
 8002022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002024:	2302      	movs	r3, #2
 8002026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2102      	movs	r1, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f003 f862 	bl	8005108 <HAL_RCC_ClockConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800204a:	f000 fc83 	bl	8002954 <Error_Handler>
  }
}
 800204e:	bf00      	nop
 8002050:	3750      	adds	r7, #80	; 0x50
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000

08002060 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002066:	463b      	mov	r3, r7
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002072:	4b84      	ldr	r3, [pc, #528]	; (8002284 <MX_ADC1_Init+0x224>)
 8002074:	4a84      	ldr	r2, [pc, #528]	; (8002288 <MX_ADC1_Init+0x228>)
 8002076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002078:	4b82      	ldr	r3, [pc, #520]	; (8002284 <MX_ADC1_Init+0x224>)
 800207a:	2200      	movs	r2, #0
 800207c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800207e:	4b81      	ldr	r3, [pc, #516]	; (8002284 <MX_ADC1_Init+0x224>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002084:	4b7f      	ldr	r3, [pc, #508]	; (8002284 <MX_ADC1_Init+0x224>)
 8002086:	2201      	movs	r2, #1
 8002088:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800208a:	4b7e      	ldr	r3, [pc, #504]	; (8002284 <MX_ADC1_Init+0x224>)
 800208c:	2200      	movs	r2, #0
 800208e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002090:	4b7c      	ldr	r3, [pc, #496]	; (8002284 <MX_ADC1_Init+0x224>)
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002098:	4b7a      	ldr	r3, [pc, #488]	; (8002284 <MX_ADC1_Init+0x224>)
 800209a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80020a0:	4b78      	ldr	r3, [pc, #480]	; (8002284 <MX_ADC1_Init+0x224>)
 80020a2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020a8:	4b76      	ldr	r3, [pc, #472]	; (8002284 <MX_ADC1_Init+0x224>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 15;
 80020ae:	4b75      	ldr	r3, [pc, #468]	; (8002284 <MX_ADC1_Init+0x224>)
 80020b0:	220f      	movs	r2, #15
 80020b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020b4:	4b73      	ldr	r3, [pc, #460]	; (8002284 <MX_ADC1_Init+0x224>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80020bc:	4b71      	ldr	r3, [pc, #452]	; (8002284 <MX_ADC1_Init+0x224>)
 80020be:	2200      	movs	r2, #0
 80020c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020c2:	4870      	ldr	r0, [pc, #448]	; (8002284 <MX_ADC1_Init+0x224>)
 80020c4:	f000 ff44 	bl	8002f50 <HAL_ADC_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80020ce:	f000 fc41 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80020da:	2304      	movs	r3, #4
 80020dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020de:	463b      	mov	r3, r7
 80020e0:	4619      	mov	r1, r3
 80020e2:	4868      	ldr	r0, [pc, #416]	; (8002284 <MX_ADC1_Init+0x224>)
 80020e4:	f001 f87c 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80020ee:	f000 fc31 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020f2:	2301      	movs	r3, #1
 80020f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80020f6:	2302      	movs	r3, #2
 80020f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020fa:	463b      	mov	r3, r7
 80020fc:	4619      	mov	r1, r3
 80020fe:	4861      	ldr	r0, [pc, #388]	; (8002284 <MX_ADC1_Init+0x224>)
 8002100:	f001 f86e 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800210a:	f000 fc23 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800210e:	2302      	movs	r3, #2
 8002110:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002112:	2303      	movs	r3, #3
 8002114:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	4619      	mov	r1, r3
 800211a:	485a      	ldr	r0, [pc, #360]	; (8002284 <MX_ADC1_Init+0x224>)
 800211c:	f001 f860 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8002126:	f000 fc15 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800212a:	2303      	movs	r3, #3
 800212c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800212e:	2304      	movs	r3, #4
 8002130:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002132:	463b      	mov	r3, r7
 8002134:	4619      	mov	r1, r3
 8002136:	4853      	ldr	r0, [pc, #332]	; (8002284 <MX_ADC1_Init+0x224>)
 8002138:	f001 f852 	bl	80031e0 <HAL_ADC_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002142:	f000 fc07 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002146:	2304      	movs	r3, #4
 8002148:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800214a:	2305      	movs	r3, #5
 800214c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214e:	463b      	mov	r3, r7
 8002150:	4619      	mov	r1, r3
 8002152:	484c      	ldr	r0, [pc, #304]	; (8002284 <MX_ADC1_Init+0x224>)
 8002154:	f001 f844 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800215e:	f000 fbf9 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002162:	2305      	movs	r3, #5
 8002164:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002166:	2306      	movs	r3, #6
 8002168:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800216a:	463b      	mov	r3, r7
 800216c:	4619      	mov	r1, r3
 800216e:	4845      	ldr	r0, [pc, #276]	; (8002284 <MX_ADC1_Init+0x224>)
 8002170:	f001 f836 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 800217a:	f000 fbeb 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800217e:	2306      	movs	r3, #6
 8002180:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002182:	2307      	movs	r3, #7
 8002184:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002186:	463b      	mov	r3, r7
 8002188:	4619      	mov	r1, r3
 800218a:	483e      	ldr	r0, [pc, #248]	; (8002284 <MX_ADC1_Init+0x224>)
 800218c:	f001 f828 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8002196:	f000 fbdd 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800219a:	2307      	movs	r3, #7
 800219c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800219e:	2308      	movs	r3, #8
 80021a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a2:	463b      	mov	r3, r7
 80021a4:	4619      	mov	r1, r3
 80021a6:	4837      	ldr	r0, [pc, #220]	; (8002284 <MX_ADC1_Init+0x224>)
 80021a8:	f001 f81a 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80021b2:	f000 fbcf 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80021b6:	2308      	movs	r3, #8
 80021b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80021ba:	2309      	movs	r3, #9
 80021bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021be:	463b      	mov	r3, r7
 80021c0:	4619      	mov	r1, r3
 80021c2:	4830      	ldr	r0, [pc, #192]	; (8002284 <MX_ADC1_Init+0x224>)
 80021c4:	f001 f80c 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80021ce:	f000 fbc1 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80021d2:	2309      	movs	r3, #9
 80021d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80021d6:	230a      	movs	r3, #10
 80021d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021da:	463b      	mov	r3, r7
 80021dc:	4619      	mov	r1, r3
 80021de:	4829      	ldr	r0, [pc, #164]	; (8002284 <MX_ADC1_Init+0x224>)
 80021e0:	f000 fffe 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80021ea:	f000 fbb3 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80021ee:	230a      	movs	r3, #10
 80021f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80021f2:	230b      	movs	r3, #11
 80021f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021f6:	463b      	mov	r3, r7
 80021f8:	4619      	mov	r1, r3
 80021fa:	4822      	ldr	r0, [pc, #136]	; (8002284 <MX_ADC1_Init+0x224>)
 80021fc:	f000 fff0 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8002206:	f000 fba5 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800220a:	230b      	movs	r3, #11
 800220c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800220e:	230c      	movs	r3, #12
 8002210:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002212:	463b      	mov	r3, r7
 8002214:	4619      	mov	r1, r3
 8002216:	481b      	ldr	r0, [pc, #108]	; (8002284 <MX_ADC1_Init+0x224>)
 8002218:	f000 ffe2 	bl	80031e0 <HAL_ADC_ConfigChannel>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8002222:	f000 fb97 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002226:	230c      	movs	r3, #12
 8002228:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800222a:	230d      	movs	r3, #13
 800222c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800222e:	463b      	mov	r3, r7
 8002230:	4619      	mov	r1, r3
 8002232:	4814      	ldr	r0, [pc, #80]	; (8002284 <MX_ADC1_Init+0x224>)
 8002234:	f000 ffd4 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 800223e:	f000 fb89 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002242:	230d      	movs	r3, #13
 8002244:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002246:	230e      	movs	r3, #14
 8002248:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800224a:	463b      	mov	r3, r7
 800224c:	4619      	mov	r1, r3
 800224e:	480d      	ldr	r0, [pc, #52]	; (8002284 <MX_ADC1_Init+0x224>)
 8002250:	f000 ffc6 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 800225a:	f000 fb7b 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800225e:	230e      	movs	r3, #14
 8002260:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002262:	230f      	movs	r3, #15
 8002264:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002266:	463b      	mov	r3, r7
 8002268:	4619      	mov	r1, r3
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <MX_ADC1_Init+0x224>)
 800226c:	f000 ffb8 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_ADC1_Init+0x21a>
  {
    Error_Handler();
 8002276:	f000 fb6d 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20004040 	.word	0x20004040
 8002288:	40012000 	.word	0x40012000

0800228c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_I2C1_Init+0x50>)
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <MX_I2C1_Init+0x54>)
 8002294:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_I2C1_Init+0x50>)
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <MX_I2C1_Init+0x58>)
 800229a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_I2C1_Init+0x50>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_I2C1_Init+0x50>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_I2C1_Init+0x50>)
 80022aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <MX_I2C1_Init+0x50>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_I2C1_Init+0x50>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <MX_I2C1_Init+0x50>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_I2C1_Init+0x50>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <MX_I2C1_Init+0x50>)
 80022ca:	f002 f849 	bl	8004360 <HAL_I2C_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022d4:	f000 fb3e 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200040e8 	.word	0x200040e8
 80022e0:	40005400 	.word	0x40005400
 80022e4:	00061a80 	.word	0x00061a80

080022e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <MX_I2C2_Init+0x50>)
 80022ee:	4a13      	ldr	r2, [pc, #76]	; (800233c <MX_I2C2_Init+0x54>)
 80022f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_I2C2_Init+0x50>)
 80022f4:	4a12      	ldr	r2, [pc, #72]	; (8002340 <MX_I2C2_Init+0x58>)
 80022f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <MX_I2C2_Init+0x50>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_I2C2_Init+0x50>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_I2C2_Init+0x50>)
 8002306:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800230a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <MX_I2C2_Init+0x50>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_I2C2_Init+0x50>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <MX_I2C2_Init+0x50>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_I2C2_Init+0x50>)
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002324:	4804      	ldr	r0, [pc, #16]	; (8002338 <MX_I2C2_Init+0x50>)
 8002326:	f002 f81b 	bl	8004360 <HAL_I2C_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002330:	f000 fb10 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	2000413c 	.word	0x2000413c
 800233c:	40005800 	.word	0x40005800
 8002340:	00061a80 	.word	0x00061a80

08002344 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_I2C3_Init+0x50>)
 800234a:	4a13      	ldr	r2, [pc, #76]	; (8002398 <MX_I2C3_Init+0x54>)
 800234c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_I2C3_Init+0x50>)
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <MX_I2C3_Init+0x58>)
 8002352:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_I2C3_Init+0x50>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_I2C3_Init+0x50>)
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_I2C3_Init+0x50>)
 8002362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002366:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <MX_I2C3_Init+0x50>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_I2C3_Init+0x50>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <MX_I2C3_Init+0x50>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_I2C3_Init+0x50>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002380:	4804      	ldr	r0, [pc, #16]	; (8002394 <MX_I2C3_Init+0x50>)
 8002382:	f001 ffed 	bl	8004360 <HAL_I2C_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800238c:	f000 fae2 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20004190 	.word	0x20004190
 8002398:	40005c00 	.word	0x40005c00
 800239c:	000186a0 	.word	0x000186a0

080023a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b4:	463b      	mov	r3, r7
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <MX_TIM2_Init+0x98>)
 80023be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 80023c4:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <MX_TIM2_Init+0x98>)
 80023c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80023ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_TIM2_Init+0x98>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <MX_TIM2_Init+0x98>)
 80023d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80023d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <MX_TIM2_Init+0x98>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <MX_TIM2_Init+0x98>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023e6:	4814      	ldr	r0, [pc, #80]	; (8002438 <MX_TIM2_Init+0x98>)
 80023e8:	f003 f85a 	bl	80054a0 <HAL_TIM_Base_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023f2:	f000 faaf 	bl	8002954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	4619      	mov	r1, r3
 8002402:	480d      	ldr	r0, [pc, #52]	; (8002438 <MX_TIM2_Init+0x98>)
 8002404:	f003 f8f6 	bl	80055f4 <HAL_TIM_ConfigClockSource>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800240e:	f000 faa1 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002412:	2320      	movs	r3, #32
 8002414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800241a:	463b      	mov	r3, r7
 800241c:	4619      	mov	r1, r3
 800241e:	4806      	ldr	r0, [pc, #24]	; (8002438 <MX_TIM2_Init+0x98>)
 8002420:	f003 faca 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800242a:	f000 fa93 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200041e4 	.word	0x200041e4

0800243c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002450:	463b      	mov	r3, r7
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <MX_TIM4_Init+0x90>)
 800245a:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <MX_TIM4_Init+0x94>)
 800245c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80 - 1;
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <MX_TIM4_Init+0x90>)
 8002460:	224f      	movs	r2, #79	; 0x4f
 8002462:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <MX_TIM4_Init+0x90>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 123;
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <MX_TIM4_Init+0x90>)
 800246c:	227b      	movs	r2, #123	; 0x7b
 800246e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <MX_TIM4_Init+0x90>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_TIM4_Init+0x90>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800247c:	4813      	ldr	r0, [pc, #76]	; (80024cc <MX_TIM4_Init+0x90>)
 800247e:	f003 f80f 	bl	80054a0 <HAL_TIM_Base_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002488:	f000 fa64 	bl	8002954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	4619      	mov	r1, r3
 8002498:	480c      	ldr	r0, [pc, #48]	; (80024cc <MX_TIM4_Init+0x90>)
 800249a:	f003 f8ab 	bl	80055f4 <HAL_TIM_ConfigClockSource>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80024a4:	f000 fa56 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	4619      	mov	r1, r3
 80024b4:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_TIM4_Init+0x90>)
 80024b6:	f003 fa7f 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80024c0:	f000 fa48 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024c4:	bf00      	nop
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	2000422c 	.word	0x2000422c
 80024d0:	40000800 	.word	0x40000800

080024d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <MX_DMA_Init+0x3c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <MX_DMA_Init+0x3c>)
 80024e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_DMA_Init+0x3c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	2038      	movs	r0, #56	; 0x38
 80024fc:	f001 f9eb 	bl	80038d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002500:	2038      	movs	r0, #56	; 0x38
 8002502:	f001 fa04 	bl	800390e <HAL_NVIC_EnableIRQ>

}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800

08002514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <MX_GPIO_Init+0x134>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a45      	ldr	r2, [pc, #276]	; (8002648 <MX_GPIO_Init+0x134>)
 8002534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b43      	ldr	r3, [pc, #268]	; (8002648 <MX_GPIO_Init+0x134>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <MX_GPIO_Init+0x134>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a3e      	ldr	r2, [pc, #248]	; (8002648 <MX_GPIO_Init+0x134>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <MX_GPIO_Init+0x134>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <MX_GPIO_Init+0x134>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a37      	ldr	r2, [pc, #220]	; (8002648 <MX_GPIO_Init+0x134>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b35      	ldr	r3, [pc, #212]	; (8002648 <MX_GPIO_Init+0x134>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <MX_GPIO_Init+0x134>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a30      	ldr	r2, [pc, #192]	; (8002648 <MX_GPIO_Init+0x134>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <MX_GPIO_Init+0x134>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_SET);
 800259a:	2201      	movs	r2, #1
 800259c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025a0:	482a      	ldr	r0, [pc, #168]	; (800264c <MX_GPIO_Init+0x138>)
 80025a2:	f001 fec3 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ac:	4827      	ldr	r0, [pc, #156]	; (800264c <MX_GPIO_Init+0x138>)
 80025ae:	f001 febd 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSEL_Pin|SR_Pin|FS2_Pin|FS1_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80025b8:	4825      	ldr	r0, [pc, #148]	; (8002650 <MX_GPIO_Init+0x13c>)
 80025ba:	f001 feb7 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO0_GPIO_Port, GPIO0_Pin, GPIO_PIN_RESET);
 80025be:	2200      	movs	r2, #0
 80025c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025c4:	4823      	ldr	r0, [pc, #140]	; (8002654 <MX_GPIO_Init+0x140>)
 80025c6:	f001 feb1 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nRST_DSP_Pin EN_SCK_Pin */
  GPIO_InitStruct.Pin = nRST_DSP_Pin|EN_SCK_Pin;
 80025ca:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80025ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80025d0:	2311      	movs	r3, #17
 80025d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d8:	2302      	movs	r3, #2
 80025da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	4619      	mov	r1, r3
 80025e2:	481a      	ldr	r0, [pc, #104]	; (800264c <MX_GPIO_Init+0x138>)
 80025e4:	f001 fd1e 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSEL_Pin SR_Pin FS2_Pin FS1_Pin */
  GPIO_InitStruct.Pin = CSEL_Pin|SR_Pin|FS2_Pin|FS1_Pin;
 80025e8:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80025ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ee:	2301      	movs	r3, #1
 80025f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f6:	2302      	movs	r3, #2
 80025f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4619      	mov	r1, r3
 8002600:	4813      	ldr	r0, [pc, #76]	; (8002650 <MX_GPIO_Init+0x13c>)
 8002602:	f001 fd0f 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO0_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin;
 8002606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO0_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	480d      	ldr	r0, [pc, #52]	; (8002654 <MX_GPIO_Init+0x140>)
 8002620:	f001 fd00 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 8002624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262e:	2301      	movs	r3, #1
 8002630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4806      	ldr	r0, [pc, #24]	; (8002654 <MX_GPIO_Init+0x140>)
 800263a:	f001 fcf3 	bl	8004024 <HAL_GPIO_Init>

}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	; 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40020400 	.word	0x40020400
 8002650:	40020000 	.word	0x40020000
 8002654:	40020800 	.word	0x40020800

08002658 <SIGMA_WRITE_REGISTER_BLOCK>:

/* USER CODE BEGIN 4 */
void SIGMA_WRITE_REGISTER_BLOCK(uint16_t devAddress, uint16_t address, uint16_t length, uint8_t *pData)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af04      	add	r7, sp, #16
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	4603      	mov	r3, r0
 8002662:	81fb      	strh	r3, [r7, #14]
 8002664:	460b      	mov	r3, r1
 8002666:	81bb      	strh	r3, [r7, #12]
 8002668:	4613      	mov	r3, r2
 800266a:	817b      	strh	r3, [r7, #10]
	stat = HAL_I2C_Mem_Write(&hi2c1, devAddress, address, 2, pData, length, 1000);
 800266c:	89ba      	ldrh	r2, [r7, #12]
 800266e:	89f9      	ldrh	r1, [r7, #14]
 8002670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002674:	9302      	str	r3, [sp, #8]
 8002676:	897b      	ldrh	r3, [r7, #10]
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2302      	movs	r3, #2
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <SIGMA_WRITE_REGISTER_BLOCK+0x40>)
 8002682:	f001 ffb1 	bl	80045e8 <HAL_I2C_Mem_Write>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <SIGMA_WRITE_REGISTER_BLOCK+0x44>)
 800268c:	701a      	strb	r2, [r3, #0]
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200040e8 	.word	0x200040e8
 800269c:	20004274 	.word	0x20004274

080026a0 <SIGMA_WRITE_DELAY>:

void SIGMA_WRITE_DELAY(uint16_t devAddress, uint16_t length, uint8_t *pData)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	603a      	str	r2, [r7, #0]
 80026aa:	80fb      	strh	r3, [r7, #6]
 80026ac:	460b      	mov	r3, r1
 80026ae:	80bb      	strh	r3, [r7, #4]
	HAL_Delay(11);
 80026b0:	200b      	movs	r0, #11
 80026b2:	f000 fc29 	bl	8002f08 <HAL_Delay>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
	uint32_t j = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
	uint32_t k = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]


	for(k=VOL_ARRAY; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 80026d4:	230b      	movs	r3, #11
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	e080      	b.n	80027dc <HAL_ADC_ConvCpltCallback+0x11c>
	{
		for(i=0; i<30; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e077      	b.n	80027d0 <HAL_ADC_ConvCpltCallback+0x110>
		{
			if((i == 0) && (value[k] < (linear_in_table[i+1])-15))
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d11f      	bne.n	8002726 <HAL_ADC_ConvCpltCallback+0x66>
 80026e6:	4a88      	ldr	r2, [pc, #544]	; (8002908 <HAL_ADC_ConvCpltCallback+0x248>)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	3201      	adds	r2, #1
 80026f2:	4986      	ldr	r1, [pc, #536]	; (800290c <HAL_ADC_ConvCpltCallback+0x24c>)
 80026f4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80026f8:	3a0f      	subs	r2, #15
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d213      	bcs.n	8002726 <HAL_ADC_ConvCpltCallback+0x66>
			{
				if(pote[k] != i)
 80026fe:	4a84      	ldr	r2, [pc, #528]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002706:	461a      	mov	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	4293      	cmp	r3, r2
 800270c:	d05d      	beq.n	80027ca <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	b299      	uxth	r1, r3
 8002712:	4a7f      	ldr	r2, [pc, #508]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 800271a:	4a7e      	ldr	r2, [pc, #504]	; (8002914 <HAL_ADC_ConvCpltCallback+0x254>)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2101      	movs	r1, #1
 8002720:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 8002724:	e051      	b.n	80027ca <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i > 0) && (i < 29) && (value[k] > (linear_in_table[i]+15)) && (value[k] < (linear_in_table[i+1])-15))
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d02d      	beq.n	8002788 <HAL_ADC_ConvCpltCallback+0xc8>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b1c      	cmp	r3, #28
 8002730:	d82a      	bhi.n	8002788 <HAL_ADC_ConvCpltCallback+0xc8>
 8002732:	4a75      	ldr	r2, [pc, #468]	; (8002908 <HAL_ADC_ConvCpltCallback+0x248>)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	4974      	ldr	r1, [pc, #464]	; (800290c <HAL_ADC_ConvCpltCallback+0x24c>)
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002742:	320f      	adds	r2, #15
 8002744:	4293      	cmp	r3, r2
 8002746:	d91f      	bls.n	8002788 <HAL_ADC_ConvCpltCallback+0xc8>
 8002748:	4a6f      	ldr	r2, [pc, #444]	; (8002908 <HAL_ADC_ConvCpltCallback+0x248>)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	3201      	adds	r2, #1
 8002754:	496d      	ldr	r1, [pc, #436]	; (800290c <HAL_ADC_ConvCpltCallback+0x24c>)
 8002756:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800275a:	3a0f      	subs	r2, #15
 800275c:	4293      	cmp	r3, r2
 800275e:	d213      	bcs.n	8002788 <HAL_ADC_ConvCpltCallback+0xc8>
			{
				if(pote[k] != i)
 8002760:	4a6b      	ldr	r2, [pc, #428]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002768:	461a      	mov	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	4293      	cmp	r3, r2
 800276e:	d02c      	beq.n	80027ca <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	b299      	uxth	r1, r3
 8002774:	4a66      	ldr	r2, [pc, #408]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 800277c:	4a65      	ldr	r2, [pc, #404]	; (8002914 <HAL_ADC_ConvCpltCallback+0x254>)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2101      	movs	r1, #1
 8002782:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 8002786:	e020      	b.n	80027ca <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i == 29) && (value[k] > (linear_in_table[i]+15)))
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b1d      	cmp	r3, #29
 800278c:	d11d      	bne.n	80027ca <HAL_ADC_ConvCpltCallback+0x10a>
 800278e:	4a5e      	ldr	r2, [pc, #376]	; (8002908 <HAL_ADC_ConvCpltCallback+0x248>)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	495d      	ldr	r1, [pc, #372]	; (800290c <HAL_ADC_ConvCpltCallback+0x24c>)
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800279e:	320f      	adds	r2, #15
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d912      	bls.n	80027ca <HAL_ADC_ConvCpltCallback+0x10a>
			{
				if(pote[k] != i)
 80027a4:	4a5a      	ldr	r2, [pc, #360]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027ac:	461a      	mov	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00a      	beq.n	80027ca <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	b299      	uxth	r1, r3
 80027b8:	4a55      	ldr	r2, [pc, #340]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 80027c0:	4a54      	ldr	r2, [pc, #336]	; (8002914 <HAL_ADC_ConvCpltCallback+0x254>)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2101      	movs	r1, #1
 80027c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3301      	adds	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b1d      	cmp	r3, #29
 80027d4:	d984      	bls.n	80026e0 <HAL_ADC_ConvCpltCallback+0x20>
	for(k=VOL_ARRAY; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3301      	adds	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b0e      	cmp	r3, #14
 80027e0:	f67f af7b 	bls.w	80026da <HAL_ADC_ConvCpltCallback+0x1a>
			}
		}
	}


	for(j=0; j<(VOL_ARRAY); j++) // For filter 32Hz - 16KHz + Subwoofer
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	e080      	b.n	80028ec <HAL_ADC_ConvCpltCallback+0x22c>
	{
		for(i=0; i<30; i++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e077      	b.n	80028e0 <HAL_ADC_ConvCpltCallback+0x220>
		{
			if((i == 0) && (value[j] < (log_in_table[i+1])-15))
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d11f      	bne.n	8002836 <HAL_ADC_ConvCpltCallback+0x176>
 80027f6:	4a44      	ldr	r2, [pc, #272]	; (8002908 <HAL_ADC_ConvCpltCallback+0x248>)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	3201      	adds	r2, #1
 8002802:	4945      	ldr	r1, [pc, #276]	; (8002918 <HAL_ADC_ConvCpltCallback+0x258>)
 8002804:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002808:	3a0f      	subs	r2, #15
 800280a:	4293      	cmp	r3, r2
 800280c:	d213      	bcs.n	8002836 <HAL_ADC_ConvCpltCallback+0x176>
			{
				if(pote[j] != i)
 800280e:	4a40      	ldr	r2, [pc, #256]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002816:	461a      	mov	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	4293      	cmp	r3, r2
 800281c:	d05d      	beq.n	80028da <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	b299      	uxth	r1, r3
 8002822:	4a3b      	ldr	r2, [pc, #236]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 800282a:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <HAL_ADC_ConvCpltCallback+0x254>)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	2101      	movs	r1, #1
 8002830:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 8002834:	e051      	b.n	80028da <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i > 0) && (i < 29) && (value[j] > (log_in_table[i]+15)) && (value[j] < (log_in_table[i+1])-15))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02d      	beq.n	8002898 <HAL_ADC_ConvCpltCallback+0x1d8>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b1c      	cmp	r3, #28
 8002840:	d82a      	bhi.n	8002898 <HAL_ADC_ConvCpltCallback+0x1d8>
 8002842:	4a31      	ldr	r2, [pc, #196]	; (8002908 <HAL_ADC_ConvCpltCallback+0x248>)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	4933      	ldr	r1, [pc, #204]	; (8002918 <HAL_ADC_ConvCpltCallback+0x258>)
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002852:	320f      	adds	r2, #15
 8002854:	4293      	cmp	r3, r2
 8002856:	d91f      	bls.n	8002898 <HAL_ADC_ConvCpltCallback+0x1d8>
 8002858:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <HAL_ADC_ConvCpltCallback+0x248>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	3201      	adds	r2, #1
 8002864:	492c      	ldr	r1, [pc, #176]	; (8002918 <HAL_ADC_ConvCpltCallback+0x258>)
 8002866:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800286a:	3a0f      	subs	r2, #15
 800286c:	4293      	cmp	r3, r2
 800286e:	d213      	bcs.n	8002898 <HAL_ADC_ConvCpltCallback+0x1d8>
			{
				if(pote[j] != i)
 8002870:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002878:	461a      	mov	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4293      	cmp	r3, r2
 800287e:	d02c      	beq.n	80028da <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	b299      	uxth	r1, r3
 8002884:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 800288c:	4a21      	ldr	r2, [pc, #132]	; (8002914 <HAL_ADC_ConvCpltCallback+0x254>)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2101      	movs	r1, #1
 8002892:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 8002896:	e020      	b.n	80028da <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i == 29) && (value[j] > (log_in_table[i]+15)))
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b1d      	cmp	r3, #29
 800289c:	d11d      	bne.n	80028da <HAL_ADC_ConvCpltCallback+0x21a>
 800289e:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_ADC_ConvCpltCallback+0x248>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	491c      	ldr	r1, [pc, #112]	; (8002918 <HAL_ADC_ConvCpltCallback+0x258>)
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80028ae:	320f      	adds	r2, #15
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d912      	bls.n	80028da <HAL_ADC_ConvCpltCallback+0x21a>
			{
				if(pote[j] != i)
 80028b4:	4a16      	ldr	r2, [pc, #88]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028bc:	461a      	mov	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00a      	beq.n	80028da <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	b299      	uxth	r1, r3
 80028c8:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HAL_ADC_ConvCpltCallback+0x250>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 80028d0:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_ADC_ConvCpltCallback+0x254>)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2101      	movs	r1, #1
 80028d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3301      	adds	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b1d      	cmp	r3, #29
 80028e4:	d984      	bls.n	80027f0 <HAL_ADC_ConvCpltCallback+0x130>
	for(j=0; j<(VOL_ARRAY); j++) // For filter 32Hz - 16KHz + Subwoofer
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	3301      	adds	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b0a      	cmp	r3, #10
 80028f0:	f67f af7b 	bls.w	80027ea <HAL_ADC_ConvCpltCallback+0x12a>
			}
		}

	}

	update = 1;
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_ADC_ConvCpltCallback+0x25c>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	2000427c 	.word	0x2000427c
 800290c:	20004314 	.word	0x20004314
 8002910:	200042b8 	.word	0x200042b8
 8002914:	20004350 	.word	0x20004350
 8002918:	200042d8 	.word	0x200042d8
 800291c:	2000436e 	.word	0x2000436e

08002920 <delay_us>:

void delay_us(uint16_t us)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CNT = 0;
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <delay_us+0x30>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2200      	movs	r2, #0
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
	while((htim4.Instance->CNT) < us);
 8002932:	bf00      	nop
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <delay_us+0x30>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	429a      	cmp	r2, r3
 800293e:	d3f9      	bcc.n	8002934 <delay_us+0x14>
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	2000422c 	.word	0x2000422c

08002954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
}
 800295a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800295c:	e7fe      	b.n	800295c <Error_Handler+0x8>
	...

08002960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_MspInit+0x4c>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <HAL_MspInit+0x4c>)
 8002970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_MspInit+0x4c>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_MspInit+0x4c>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_MspInit+0x4c>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_MspInit+0x4c>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800

080029b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	; 0x30
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a49      	ldr	r2, [pc, #292]	; (8002af4 <HAL_ADC_MspInit+0x144>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	f040 808c 	bne.w	8002aec <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	4a46      	ldr	r2, [pc, #280]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e2:	6453      	str	r3, [r2, #68]	; 0x44
 80029e4:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	4a3f      	ldr	r2, [pc, #252]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002a00:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	4a38      	ldr	r2, [pc, #224]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1c:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	4a31      	ldr	r2, [pc, #196]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	6313      	str	r3, [r2, #48]	; 0x30
 8002a38:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <HAL_ADC_MspInit+0x148>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a44:	231f      	movs	r3, #31
 8002a46:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	4619      	mov	r1, r3
 8002a56:	4829      	ldr	r0, [pc, #164]	; (8002afc <HAL_ADC_MspInit+0x14c>)
 8002a58:	f001 fae4 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a5c:	23ff      	movs	r3, #255	; 0xff
 8002a5e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a60:	2303      	movs	r3, #3
 8002a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4824      	ldr	r0, [pc, #144]	; (8002b00 <HAL_ADC_MspInit+0x150>)
 8002a70:	f001 fad8 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a74:	2303      	movs	r3, #3
 8002a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4619      	mov	r1, r3
 8002a86:	481f      	ldr	r0, [pc, #124]	; (8002b04 <HAL_ADC_MspInit+0x154>)
 8002a88:	f001 facc 	bl	8004024 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_ADC_MspInit+0x15c>)
 8002a90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aa4:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aaa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aac:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ad0:	480d      	ldr	r0, [pc, #52]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002ad2:	f000 ff37 	bl	8003944 <HAL_DMA_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002adc:	f7ff ff3a 	bl	8002954 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <HAL_ADC_MspInit+0x158>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	3730      	adds	r7, #48	; 0x30
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40012000 	.word	0x40012000
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020800 	.word	0x40020800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400
 8002b08:	20004088 	.word	0x20004088
 8002b0c:	40026410 	.word	0x40026410

08002b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08e      	sub	sp, #56	; 0x38
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a63      	ldr	r2, [pc, #396]	; (8002cbc <HAL_I2C_MspInit+0x1ac>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d12c      	bne.n	8002b8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
 8002b36:	4b62      	ldr	r3, [pc, #392]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a61      	ldr	r2, [pc, #388]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b5f      	ldr	r3, [pc, #380]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	623b      	str	r3, [r7, #32]
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b4e:	23c0      	movs	r3, #192	; 0xc0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b52:	2312      	movs	r3, #18
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b5e:	2304      	movs	r3, #4
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b66:	4619      	mov	r1, r3
 8002b68:	4856      	ldr	r0, [pc, #344]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002b6a:	f001 fa5b 	bl	8004024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a52      	ldr	r2, [pc, #328]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b8a:	e093      	b.n	8002cb4 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a4d      	ldr	r2, [pc, #308]	; (8002cc8 <HAL_I2C_MspInit+0x1b8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d13d      	bne.n	8002c12 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a48      	ldr	r2, [pc, #288]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb8:	2312      	movs	r3, #18
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bcc:	4619      	mov	r1, r3
 8002bce:	483d      	ldr	r0, [pc, #244]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002bd0:	f001 fa28 	bl	8004024 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bd8:	2312      	movs	r3, #18
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be0:	2303      	movs	r3, #3
 8002be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002be4:	2309      	movs	r3, #9
 8002be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bec:	4619      	mov	r1, r3
 8002bee:	4835      	ldr	r0, [pc, #212]	; (8002cc4 <HAL_I2C_MspInit+0x1b4>)
 8002bf0:	f001 fa18 	bl	8004024 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	4a30      	ldr	r2, [pc, #192]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c02:	6413      	str	r3, [r2, #64]	; 0x40
 8002c04:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	697b      	ldr	r3, [r7, #20]
}
 8002c10:	e050      	b.n	8002cb4 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2d      	ldr	r2, [pc, #180]	; (8002ccc <HAL_I2C_MspInit+0x1bc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d14b      	bne.n	8002cb4 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	4a26      	ldr	r2, [pc, #152]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2c:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c5a:	2312      	movs	r3, #18
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c66:	2304      	movs	r3, #4
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4817      	ldr	r0, [pc, #92]	; (8002cd0 <HAL_I2C_MspInit+0x1c0>)
 8002c72:	f001 f9d7 	bl	8004024 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c7c:	2312      	movs	r3, #18
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c88:	2304      	movs	r3, #4
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c90:	4619      	mov	r1, r3
 8002c92:	4810      	ldr	r0, [pc, #64]	; (8002cd4 <HAL_I2C_MspInit+0x1c4>)
 8002c94:	f001 f9c6 	bl	8004024 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002ca2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_I2C_MspInit+0x1b0>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	3738      	adds	r7, #56	; 0x38
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40005400 	.word	0x40005400
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40005800 	.word	0x40005800
 8002ccc:	40005c00 	.word	0x40005c00
 8002cd0:	40020800 	.word	0x40020800
 8002cd4:	40020000 	.word	0x40020000

08002cd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d10e      	bne.n	8002d08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <HAL_TIM_Base_MspInit+0x64>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <HAL_TIM_Base_MspInit+0x64>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <HAL_TIM_Base_MspInit+0x64>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d06:	e012      	b.n	8002d2e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <HAL_TIM_Base_MspInit+0x68>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10d      	bne.n	8002d2e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_TIM_Base_MspInit+0x64>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <HAL_TIM_Base_MspInit+0x64>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_TIM_Base_MspInit+0x64>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40000800 	.word	0x40000800

08002d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <NMI_Handler+0x4>

08002d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d4e:	e7fe      	b.n	8002d4e <HardFault_Handler+0x4>

08002d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <MemManage_Handler+0x4>

08002d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <BusFault_Handler+0x4>

08002d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <UsageFault_Handler+0x4>

08002d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d90:	f000 f89a 	bl	8002ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d9c:	4802      	ldr	r0, [pc, #8]	; (8002da8 <DMA2_Stream0_IRQHandler+0x10>)
 8002d9e:	f000 fed7 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20004088 	.word	0x20004088

08002dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <SystemInit+0x20>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <SystemInit+0x20>)
 8002db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dd6:	490e      	ldr	r1, [pc, #56]	; (8002e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dd8:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ddc:	e002      	b.n	8002de4 <LoopCopyDataInit>

08002dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de2:	3304      	adds	r3, #4

08002de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de8:	d3f9      	bcc.n	8002dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dea:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dec:	4c0b      	ldr	r4, [pc, #44]	; (8002e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df0:	e001      	b.n	8002df6 <LoopFillZerobss>

08002df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df4:	3204      	adds	r2, #4

08002df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df8:	d3fb      	bcc.n	8002df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dfa:	f7ff ffd7 	bl	8002dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dfe:	f002 fe57 	bl	8005ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e02:	f7fe fa73 	bl	80012ec <main>
  bx  lr    
 8002e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e10:	20004000 	.word	0x20004000
  ldr r2, =_sidata
 8002e14:	08006060 	.word	0x08006060
  ldr r2, =_sbss
 8002e18:	20004000 	.word	0x20004000
  ldr r4, =_ebss
 8002e1c:	200044b8 	.word	0x200044b8

08002e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e20:	e7fe      	b.n	8002e20 <ADC_IRQHandler>
	...

08002e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_Init+0x40>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0d      	ldr	r2, [pc, #52]	; (8002e64 <HAL_Init+0x40>)
 8002e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_Init+0x40>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <HAL_Init+0x40>)
 8002e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_Init+0x40>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <HAL_Init+0x40>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e4c:	2003      	movs	r0, #3
 8002e4e:	f000 fd37 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e52:	200f      	movs	r0, #15
 8002e54:	f000 f808 	bl	8002e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e58:	f7ff fd82 	bl	8002960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00

08002e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_InitTick+0x54>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_InitTick+0x58>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fd4f 	bl	800392a <HAL_SYSTICK_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00e      	b.n	8002eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b0f      	cmp	r3, #15
 8002e9a:	d80a      	bhi.n	8002eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	f000 fd17 	bl	80038d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ea8:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <HAL_InitTick+0x5c>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20003fa4 	.word	0x20003fa4
 8002ec0:	20003fac 	.word	0x20003fac
 8002ec4:	20003fa8 	.word	0x20003fa8

08002ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_IncTick+0x20>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_IncTick+0x24>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4a04      	ldr	r2, [pc, #16]	; (8002eec <HAL_IncTick+0x24>)
 8002eda:	6013      	str	r3, [r2, #0]
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20003fac 	.word	0x20003fac
 8002eec:	2000437c 	.word	0x2000437c

08002ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <HAL_GetTick+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	2000437c 	.word	0x2000437c

08002f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff ffee 	bl	8002ef0 <HAL_GetTick>
 8002f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d005      	beq.n	8002f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_Delay+0x44>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f2e:	bf00      	nop
 8002f30:	f7ff ffde 	bl	8002ef0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d8f7      	bhi.n	8002f30 <HAL_Delay+0x28>
  {
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20003fac 	.word	0x20003fac

08002f50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e033      	b.n	8002fce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fd1e 	bl	80029b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d118      	bne.n	8002fc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f96:	f023 0302 	bic.w	r3, r3, #2
 8002f9a:	f043 0202 	orr.w	r2, r3, #2
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa3e 	bl	8003424 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002fbe:	e001      	b.n	8002fc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_Start_DMA+0x1e>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e0ce      	b.n	8003194 <HAL_ADC_Start_DMA+0x1bc>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d018      	beq.n	800303e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800301c:	4b5f      	ldr	r3, [pc, #380]	; (800319c <HAL_ADC_Start_DMA+0x1c4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5f      	ldr	r2, [pc, #380]	; (80031a0 <HAL_ADC_Start_DMA+0x1c8>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0c9a      	lsrs	r2, r3, #18
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003030:	e002      	b.n	8003038 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	3b01      	subs	r3, #1
 8003036:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f9      	bne.n	8003032 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304c:	d107      	bne.n	800305e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800305c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 8086 	bne.w	800317a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003098:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ac:	d106      	bne.n	80030bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f023 0206 	bic.w	r2, r3, #6
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
 80030ba:	e002      	b.n	80030c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ca:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_ADC_Start_DMA+0x1cc>)
 80030cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	4a35      	ldr	r2, [pc, #212]	; (80031a8 <HAL_ADC_Start_DMA+0x1d0>)
 80030d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	4a34      	ldr	r2, [pc, #208]	; (80031ac <HAL_ADC_Start_DMA+0x1d4>)
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	4a33      	ldr	r2, [pc, #204]	; (80031b0 <HAL_ADC_Start_DMA+0x1d8>)
 80030e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80030fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	334c      	adds	r3, #76	; 0x4c
 800311a:	4619      	mov	r1, r3
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f000 fcbe 	bl	8003aa0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10f      	bne.n	8003150 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d129      	bne.n	8003192 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	e020      	b.n	8003192 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_ADC_Start_DMA+0x1dc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d11b      	bne.n	8003192 <HAL_ADC_Start_DMA+0x1ba>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d114      	bne.n	8003192 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	e00b      	b.n	8003192 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0210 	orr.w	r2, r3, #16
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20003fa4 	.word	0x20003fa4
 80031a0:	431bde83 	.word	0x431bde83
 80031a4:	40012300 	.word	0x40012300
 80031a8:	0800361d 	.word	0x0800361d
 80031ac:	080036d7 	.word	0x080036d7
 80031b0:	080036f3 	.word	0x080036f3
 80031b4:	40012000 	.word	0x40012000

080031b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1c>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e105      	b.n	8003408 <HAL_ADC_ConfigChannel+0x228>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b09      	cmp	r3, #9
 800320a:	d925      	bls.n	8003258 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68d9      	ldr	r1, [r3, #12]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	3b1e      	subs	r3, #30
 8003222:	2207      	movs	r2, #7
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43da      	mvns	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	400a      	ands	r2, r1
 8003230:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68d9      	ldr	r1, [r3, #12]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	4618      	mov	r0, r3
 8003244:	4603      	mov	r3, r0
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4403      	add	r3, r0
 800324a:	3b1e      	subs	r3, #30
 800324c:	409a      	lsls	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	e022      	b.n	800329e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6919      	ldr	r1, [r3, #16]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	2207      	movs	r2, #7
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	400a      	ands	r2, r1
 800327a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6919      	ldr	r1, [r3, #16]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	4618      	mov	r0, r3
 800328e:	4603      	mov	r3, r0
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4403      	add	r3, r0
 8003294:	409a      	lsls	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d824      	bhi.n	80032f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b05      	subs	r3, #5
 80032b8:	221f      	movs	r2, #31
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	400a      	ands	r2, r1
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	3b05      	subs	r3, #5
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
 80032ee:	e04c      	b.n	800338a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	d824      	bhi.n	8003342 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	3b23      	subs	r3, #35	; 0x23
 800330a:	221f      	movs	r2, #31
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43da      	mvns	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	400a      	ands	r2, r1
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	4618      	mov	r0, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	3b23      	subs	r3, #35	; 0x23
 8003334:	fa00 f203 	lsl.w	r2, r0, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
 8003340:	e023      	b.n	800338a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	3b41      	subs	r3, #65	; 0x41
 8003354:	221f      	movs	r2, #31
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	400a      	ands	r2, r1
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	4618      	mov	r0, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	3b41      	subs	r3, #65	; 0x41
 800337e:	fa00 f203 	lsl.w	r2, r0, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_ADC_ConfigChannel+0x234>)
 800338c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a21      	ldr	r2, [pc, #132]	; (8003418 <HAL_ADC_ConfigChannel+0x238>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d109      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1cc>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b12      	cmp	r3, #18
 800339e:	d105      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_ADC_ConfigChannel+0x238>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d123      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d003      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x1e6>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b11      	cmp	r3, #17
 80033c4:	d11b      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d111      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_ADC_ConfigChannel+0x23c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a10      	ldr	r2, [pc, #64]	; (8003420 <HAL_ADC_ConfigChannel+0x240>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	0c9a      	lsrs	r2, r3, #18
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033f0:	e002      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f9      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40012300 	.word	0x40012300
 8003418:	40012000 	.word	0x40012000
 800341c:	20003fa4 	.word	0x20003fa4
 8003420:	431bde83 	.word	0x431bde83

08003424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800342c:	4b79      	ldr	r3, [pc, #484]	; (8003614 <ADC_Init+0x1f0>)
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	021a      	lsls	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800347c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6899      	ldr	r1, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	4a58      	ldr	r2, [pc, #352]	; (8003618 <ADC_Init+0x1f4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6899      	ldr	r1, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	e00f      	b.n	8003522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0202 	bic.w	r2, r2, #2
 8003530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7e1b      	ldrb	r3, [r3, #24]
 800353c:	005a      	lsls	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01b      	beq.n	8003588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800356e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	3b01      	subs	r3, #1
 800357c:	035a      	lsls	r2, r3, #13
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e007      	b.n	8003598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003596:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	051a      	lsls	r2, r3, #20
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6899      	ldr	r1, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035da:	025a      	lsls	r2, r3, #9
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6899      	ldr	r1, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	029a      	lsls	r2, r3, #10
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40012300 	.word	0x40012300
 8003618:	0f000001 	.word	0x0f000001

0800361c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13c      	bne.n	80036b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d12b      	bne.n	80036a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003654:	2b00      	cmp	r3, #0
 8003656:	d127      	bne.n	80036a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003670:	2b00      	cmp	r3, #0
 8003672:	d119      	bne.n	80036a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0220 	bic.w	r2, r2, #32
 8003682:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff f809 	bl	80026c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036ae:	e00e      	b.n	80036ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff fd85 	bl	80031cc <HAL_ADC_ErrorCallback>
}
 80036c2:	e004      	b.n	80036ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff fd67 	bl	80031b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2240      	movs	r2, #64	; 0x40
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff fd5a 	bl	80031cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <__NVIC_SetPriorityGrouping+0x44>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800373c:	4013      	ands	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800374c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003752:	4a04      	ldr	r2, [pc, #16]	; (8003764 <__NVIC_SetPriorityGrouping+0x44>)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	60d3      	str	r3, [r2, #12]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <__NVIC_GetPriorityGrouping+0x18>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	f003 0307 	and.w	r3, r3, #7
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	2b00      	cmp	r3, #0
 8003794:	db0b      	blt.n	80037ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	4907      	ldr	r1, [pc, #28]	; (80037bc <__NVIC_EnableIRQ+0x38>)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2001      	movs	r0, #1
 80037a6:	fa00 f202 	lsl.w	r2, r0, r2
 80037aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	e000e100 	.word	0xe000e100

080037c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	db0a      	blt.n	80037ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	490c      	ldr	r1, [pc, #48]	; (800380c <__NVIC_SetPriority+0x4c>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	440b      	add	r3, r1
 80037e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e8:	e00a      	b.n	8003800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4908      	ldr	r1, [pc, #32]	; (8003810 <__NVIC_SetPriority+0x50>)
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3b04      	subs	r3, #4
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	440b      	add	r3, r1
 80037fe:	761a      	strb	r2, [r3, #24]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000e100 	.word	0xe000e100
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f1c3 0307 	rsb	r3, r3, #7
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf28      	it	cs
 8003832:	2304      	movcs	r3, #4
 8003834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3304      	adds	r3, #4
 800383a:	2b06      	cmp	r3, #6
 800383c:	d902      	bls.n	8003844 <NVIC_EncodePriority+0x30>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3b03      	subs	r3, #3
 8003842:	e000      	b.n	8003846 <NVIC_EncodePriority+0x32>
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	401a      	ands	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800385c:	f04f 31ff 	mov.w	r1, #4294967295
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43d9      	mvns	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	4313      	orrs	r3, r2
         );
}
 800386e:	4618      	mov	r0, r3
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800388c:	d301      	bcc.n	8003892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388e:	2301      	movs	r3, #1
 8003890:	e00f      	b.n	80038b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <SysTick_Config+0x40>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389a:	210f      	movs	r1, #15
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	f7ff ff8e 	bl	80037c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <SysTick_Config+0x40>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <SysTick_Config+0x40>)
 80038ac:	2207      	movs	r2, #7
 80038ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	e000e010 	.word	0xe000e010

080038c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff29 	bl	8003720 <__NVIC_SetPriorityGrouping>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e8:	f7ff ff3e 	bl	8003768 <__NVIC_GetPriorityGrouping>
 80038ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	6978      	ldr	r0, [r7, #20]
 80038f4:	f7ff ff8e 	bl	8003814 <NVIC_EncodePriority>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff5d 	bl	80037c0 <__NVIC_SetPriority>
}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff31 	bl	8003784 <__NVIC_EnableIRQ>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffa2 	bl	800387c <SysTick_Config>
 8003938:	4603      	mov	r3, r0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003950:	f7ff face 	bl	8002ef0 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e099      	b.n	8003a94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003980:	e00f      	b.n	80039a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003982:	f7ff fab5 	bl	8002ef0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b05      	cmp	r3, #5
 800398e:	d908      	bls.n	80039a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2203      	movs	r2, #3
 800399a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e078      	b.n	8003a94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e8      	bne.n	8003982 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_DMA_Init+0x158>)
 80039bc:	4013      	ands	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d107      	bne.n	8003a0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	4313      	orrs	r3, r2
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0307 	bic.w	r3, r3, #7
 8003a22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d117      	bne.n	8003a66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00e      	beq.n	8003a66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fa6f 	bl	8003f2c <DMA_CheckFifoParam>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2240      	movs	r2, #64	; 0x40
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a62:	2301      	movs	r3, #1
 8003a64:	e016      	b.n	8003a94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa26 	bl	8003ec0 <DMA_CalcBaseAndBitshift>
 8003a74:	4603      	mov	r3, r0
 8003a76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	223f      	movs	r2, #63	; 0x3f
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	f010803f 	.word	0xf010803f

08003aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_DMA_Start_IT+0x26>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e040      	b.n	8003b48 <HAL_DMA_Start_IT+0xa8>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d12f      	bne.n	8003b3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f9b8 	bl	8003e64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	223f      	movs	r2, #63	; 0x3f
 8003afa:	409a      	lsls	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0216 	orr.w	r2, r2, #22
 8003b0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0208 	orr.w	r2, r2, #8
 8003b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e005      	b.n	8003b46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
 8003b44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b5c:	4b8e      	ldr	r3, [pc, #568]	; (8003d98 <HAL_DMA_IRQHandler+0x248>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a8e      	ldr	r2, [pc, #568]	; (8003d9c <HAL_DMA_IRQHandler+0x24c>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01a      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0204 	bic.w	r2, r2, #4
 8003ba2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	2208      	movs	r2, #8
 8003baa:	409a      	lsls	r2, r3
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	f043 0201 	orr.w	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d012      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	2201      	movs	r2, #1
 8003be0:	409a      	lsls	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	f043 0202 	orr.w	r2, r3, #2
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d012      	beq.n	8003c28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00b      	beq.n	8003c28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	2204      	movs	r2, #4
 8003c16:	409a      	lsls	r2, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	f043 0204 	orr.w	r2, r3, #4
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d043      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d03c      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d018      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d108      	bne.n	8003c80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d024      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
 8003c7e:	e01f      	b.n	8003cc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01b      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
 8003c90:	e016      	b.n	8003cc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d107      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0208 	bic.w	r2, r2, #8
 8003cae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 808f 	beq.w	8003df0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8087 	beq.w	8003df0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d136      	bne.n	8003d68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0216 	bic.w	r2, r2, #22
 8003d08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <HAL_DMA_IRQHandler+0x1da>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0208 	bic.w	r2, r2, #8
 8003d38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3e:	223f      	movs	r2, #63	; 0x3f
 8003d40:	409a      	lsls	r2, r3
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d07e      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4798      	blx	r3
        }
        return;
 8003d66:	e079      	b.n	8003e5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01d      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10d      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d031      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
 8003d94:	e02c      	b.n	8003df0 <HAL_DMA_IRQHandler+0x2a0>
 8003d96:	bf00      	nop
 8003d98:	20003fa4 	.word	0x20003fa4
 8003d9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d023      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
 8003db0:	e01e      	b.n	8003df0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10f      	bne.n	8003de0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0210 	bic.w	r2, r2, #16
 8003dce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d032      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d022      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2205      	movs	r2, #5
 8003e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d307      	bcc.n	8003e38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f2      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x2cc>
 8003e36:	e000      	b.n	8003e3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
 8003e5a:	e000      	b.n	8003e5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e5c:	bf00      	nop
    }
  }
}
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b40      	cmp	r3, #64	; 0x40
 8003e90:	d108      	bne.n	8003ea4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ea2:	e007      	b.n	8003eb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	60da      	str	r2, [r3, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	3b10      	subs	r3, #16
 8003ed0:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <DMA_CalcBaseAndBitshift+0x64>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eda:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <DMA_CalcBaseAndBitshift+0x68>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d909      	bls.n	8003f02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	1d1a      	adds	r2, r3, #4
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	659a      	str	r2, [r3, #88]	; 0x58
 8003f00:	e007      	b.n	8003f12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f0a:	f023 0303 	bic.w	r3, r3, #3
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	aaaaaaab 	.word	0xaaaaaaab
 8003f28:	08006044 	.word	0x08006044

08003f2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d11f      	bne.n	8003f86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d856      	bhi.n	8003ffa <DMA_CheckFifoParam+0xce>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <DMA_CheckFifoParam+0x28>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f65 	.word	0x08003f65
 8003f58:	08003f77 	.word	0x08003f77
 8003f5c:	08003f65 	.word	0x08003f65
 8003f60:	08003ffb 	.word	0x08003ffb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d046      	beq.n	8003ffe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f74:	e043      	b.n	8003ffe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f7e:	d140      	bne.n	8004002 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f84:	e03d      	b.n	8004002 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8e:	d121      	bne.n	8003fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d837      	bhi.n	8004006 <DMA_CheckFifoParam+0xda>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <DMA_CheckFifoParam+0x70>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	08003fb3 	.word	0x08003fb3
 8003fa4:	08003fad 	.word	0x08003fad
 8003fa8:	08003fc5 	.word	0x08003fc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb0:	e030      	b.n	8004014 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d025      	beq.n	800400a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc2:	e022      	b.n	800400a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fcc:	d11f      	bne.n	800400e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fd2:	e01c      	b.n	800400e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d903      	bls.n	8003fe2 <DMA_CheckFifoParam+0xb6>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d003      	beq.n	8003fe8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fe0:	e018      	b.n	8004014 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe6:	e015      	b.n	8004014 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00e      	beq.n	8004012 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff8:	e00b      	b.n	8004012 <DMA_CheckFifoParam+0xe6>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e00a      	b.n	8004014 <DMA_CheckFifoParam+0xe8>
      break;
 8003ffe:	bf00      	nop
 8004000:	e008      	b.n	8004014 <DMA_CheckFifoParam+0xe8>
      break;
 8004002:	bf00      	nop
 8004004:	e006      	b.n	8004014 <DMA_CheckFifoParam+0xe8>
      break;
 8004006:	bf00      	nop
 8004008:	e004      	b.n	8004014 <DMA_CheckFifoParam+0xe8>
      break;
 800400a:	bf00      	nop
 800400c:	e002      	b.n	8004014 <DMA_CheckFifoParam+0xe8>
      break;   
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <DMA_CheckFifoParam+0xe8>
      break;
 8004012:	bf00      	nop
    }
  } 
  
  return status; 
 8004014:	7bfb      	ldrb	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop

08004024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004024:	b480      	push	{r7}
 8004026:	b089      	sub	sp, #36	; 0x24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e159      	b.n	80042f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004040:	2201      	movs	r2, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	429a      	cmp	r2, r3
 800405a:	f040 8148 	bne.w	80042ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d005      	beq.n	8004076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004072:	2b02      	cmp	r3, #2
 8004074:	d130      	bne.n	80040d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2203      	movs	r2, #3
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040ac:	2201      	movs	r2, #1
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 0201 	and.w	r2, r3, #1
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d017      	beq.n	8004114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d123      	bne.n	8004168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	08da      	lsrs	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3208      	adds	r2, #8
 8004128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	220f      	movs	r2, #15
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	08da      	lsrs	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3208      	adds	r2, #8
 8004162:	69b9      	ldr	r1, [r7, #24]
 8004164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2203      	movs	r2, #3
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0203 	and.w	r2, r3, #3
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80a2 	beq.w	80042ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	4b57      	ldr	r3, [pc, #348]	; (800430c <HAL_GPIO_Init+0x2e8>)
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	4a56      	ldr	r2, [pc, #344]	; (800430c <HAL_GPIO_Init+0x2e8>)
 80041b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041b8:	6453      	str	r3, [r2, #68]	; 0x44
 80041ba:	4b54      	ldr	r3, [pc, #336]	; (800430c <HAL_GPIO_Init+0x2e8>)
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041c6:	4a52      	ldr	r2, [pc, #328]	; (8004310 <HAL_GPIO_Init+0x2ec>)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	089b      	lsrs	r3, r3, #2
 80041cc:	3302      	adds	r3, #2
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	220f      	movs	r2, #15
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a49      	ldr	r2, [pc, #292]	; (8004314 <HAL_GPIO_Init+0x2f0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d019      	beq.n	8004226 <HAL_GPIO_Init+0x202>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a48      	ldr	r2, [pc, #288]	; (8004318 <HAL_GPIO_Init+0x2f4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_GPIO_Init+0x1fe>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a47      	ldr	r2, [pc, #284]	; (800431c <HAL_GPIO_Init+0x2f8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00d      	beq.n	800421e <HAL_GPIO_Init+0x1fa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a46      	ldr	r2, [pc, #280]	; (8004320 <HAL_GPIO_Init+0x2fc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <HAL_GPIO_Init+0x1f6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a45      	ldr	r2, [pc, #276]	; (8004324 <HAL_GPIO_Init+0x300>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <HAL_GPIO_Init+0x1f2>
 8004212:	2304      	movs	r3, #4
 8004214:	e008      	b.n	8004228 <HAL_GPIO_Init+0x204>
 8004216:	2307      	movs	r3, #7
 8004218:	e006      	b.n	8004228 <HAL_GPIO_Init+0x204>
 800421a:	2303      	movs	r3, #3
 800421c:	e004      	b.n	8004228 <HAL_GPIO_Init+0x204>
 800421e:	2302      	movs	r3, #2
 8004220:	e002      	b.n	8004228 <HAL_GPIO_Init+0x204>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_GPIO_Init+0x204>
 8004226:	2300      	movs	r3, #0
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	f002 0203 	and.w	r2, r2, #3
 800422e:	0092      	lsls	r2, r2, #2
 8004230:	4093      	lsls	r3, r2
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004238:	4935      	ldr	r1, [pc, #212]	; (8004310 <HAL_GPIO_Init+0x2ec>)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	089b      	lsrs	r3, r3, #2
 800423e:	3302      	adds	r3, #2
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004246:	4b38      	ldr	r3, [pc, #224]	; (8004328 <HAL_GPIO_Init+0x304>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800426a:	4a2f      	ldr	r2, [pc, #188]	; (8004328 <HAL_GPIO_Init+0x304>)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004270:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <HAL_GPIO_Init+0x304>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004294:	4a24      	ldr	r2, [pc, #144]	; (8004328 <HAL_GPIO_Init+0x304>)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800429a:	4b23      	ldr	r3, [pc, #140]	; (8004328 <HAL_GPIO_Init+0x304>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042be:	4a1a      	ldr	r2, [pc, #104]	; (8004328 <HAL_GPIO_Init+0x304>)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042c4:	4b18      	ldr	r3, [pc, #96]	; (8004328 <HAL_GPIO_Init+0x304>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042e8:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <HAL_GPIO_Init+0x304>)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3301      	adds	r3, #1
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	f67f aea2 	bls.w	8004040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	3724      	adds	r7, #36	; 0x24
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	40013800 	.word	0x40013800
 8004314:	40020000 	.word	0x40020000
 8004318:	40020400 	.word	0x40020400
 800431c:	40020800 	.word	0x40020800
 8004320:	40020c00 	.word	0x40020c00
 8004324:	40021000 	.word	0x40021000
 8004328:	40013c00 	.word	0x40013c00

0800432c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
 8004338:	4613      	mov	r3, r2
 800433a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800433c:	787b      	ldrb	r3, [r7, #1]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004348:	e003      	b.n	8004352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	041a      	lsls	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	619a      	str	r2, [r3, #24]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e12b      	b.n	80045ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fe fbc2 	bl	8002b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2224      	movs	r2, #36	; 0x24
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043c4:	f001 f858 	bl	8005478 <HAL_RCC_GetPCLK1Freq>
 80043c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	4a81      	ldr	r2, [pc, #516]	; (80045d4 <HAL_I2C_Init+0x274>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d807      	bhi.n	80043e4 <HAL_I2C_Init+0x84>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4a80      	ldr	r2, [pc, #512]	; (80045d8 <HAL_I2C_Init+0x278>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	bf94      	ite	ls
 80043dc:	2301      	movls	r3, #1
 80043de:	2300      	movhi	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e006      	b.n	80043f2 <HAL_I2C_Init+0x92>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a7d      	ldr	r2, [pc, #500]	; (80045dc <HAL_I2C_Init+0x27c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bf94      	ite	ls
 80043ec:	2301      	movls	r3, #1
 80043ee:	2300      	movhi	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e0e7      	b.n	80045ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a78      	ldr	r2, [pc, #480]	; (80045e0 <HAL_I2C_Init+0x280>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	0c9b      	lsrs	r3, r3, #18
 8004404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	430a      	orrs	r2, r1
 8004418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a6a      	ldr	r2, [pc, #424]	; (80045d4 <HAL_I2C_Init+0x274>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d802      	bhi.n	8004434 <HAL_I2C_Init+0xd4>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3301      	adds	r3, #1
 8004432:	e009      	b.n	8004448 <HAL_I2C_Init+0xe8>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	4a69      	ldr	r2, [pc, #420]	; (80045e4 <HAL_I2C_Init+0x284>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	3301      	adds	r3, #1
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	430b      	orrs	r3, r1
 800444e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800445a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	495c      	ldr	r1, [pc, #368]	; (80045d4 <HAL_I2C_Init+0x274>)
 8004464:	428b      	cmp	r3, r1
 8004466:	d819      	bhi.n	800449c <HAL_I2C_Init+0x13c>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1e59      	subs	r1, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	fbb1 f3f3 	udiv	r3, r1, r3
 8004476:	1c59      	adds	r1, r3, #1
 8004478:	f640 73fc 	movw	r3, #4092	; 0xffc
 800447c:	400b      	ands	r3, r1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_I2C_Init+0x138>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1e59      	subs	r1, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004490:	3301      	adds	r3, #1
 8004492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004496:	e051      	b.n	800453c <HAL_I2C_Init+0x1dc>
 8004498:	2304      	movs	r3, #4
 800449a:	e04f      	b.n	800453c <HAL_I2C_Init+0x1dc>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d111      	bne.n	80044c8 <HAL_I2C_Init+0x168>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1e58      	subs	r0, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	440b      	add	r3, r1
 80044b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b6:	3301      	adds	r3, #1
 80044b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e012      	b.n	80044ee <HAL_I2C_Init+0x18e>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	1e58      	subs	r0, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	0099      	lsls	r1, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	fbb0 f3f3 	udiv	r3, r0, r3
 80044de:	3301      	adds	r3, #1
 80044e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_I2C_Init+0x196>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e022      	b.n	800453c <HAL_I2C_Init+0x1dc>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10e      	bne.n	800451c <HAL_I2C_Init+0x1bc>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1e58      	subs	r0, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6859      	ldr	r1, [r3, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	440b      	add	r3, r1
 800450c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004510:	3301      	adds	r3, #1
 8004512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451a:	e00f      	b.n	800453c <HAL_I2C_Init+0x1dc>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1e58      	subs	r0, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6859      	ldr	r1, [r3, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	0099      	lsls	r1, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004532:	3301      	adds	r3, #1
 8004534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	6809      	ldr	r1, [r1, #0]
 8004540:	4313      	orrs	r3, r2
 8004542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69da      	ldr	r2, [r3, #28]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800456a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6911      	ldr	r1, [r2, #16]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68d2      	ldr	r2, [r2, #12]
 8004576:	4311      	orrs	r1, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	430b      	orrs	r3, r1
 800457e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	000186a0 	.word	0x000186a0
 80045d8:	001e847f 	.word	0x001e847f
 80045dc:	003d08ff 	.word	0x003d08ff
 80045e0:	431bde83 	.word	0x431bde83
 80045e4:	10624dd3 	.word	0x10624dd3

080045e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	4608      	mov	r0, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	461a      	mov	r2, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	817b      	strh	r3, [r7, #10]
 80045fa:	460b      	mov	r3, r1
 80045fc:	813b      	strh	r3, [r7, #8]
 80045fe:	4613      	mov	r3, r2
 8004600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004602:	f7fe fc75 	bl	8002ef0 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b20      	cmp	r3, #32
 8004612:	f040 80d9 	bne.w	80047c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2319      	movs	r3, #25
 800461c:	2201      	movs	r2, #1
 800461e:	496d      	ldr	r1, [pc, #436]	; (80047d4 <HAL_I2C_Mem_Write+0x1ec>)
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f971 	bl	8004908 <I2C_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800462c:	2302      	movs	r3, #2
 800462e:	e0cc      	b.n	80047ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_I2C_Mem_Write+0x56>
 800463a:	2302      	movs	r3, #2
 800463c:	e0c5      	b.n	80047ca <HAL_I2C_Mem_Write+0x1e2>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d007      	beq.n	8004664 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2221      	movs	r2, #33	; 0x21
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2240      	movs	r2, #64	; 0x40
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a4d      	ldr	r2, [pc, #308]	; (80047d8 <HAL_I2C_Mem_Write+0x1f0>)
 80046a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046a6:	88f8      	ldrh	r0, [r7, #6]
 80046a8:	893a      	ldrh	r2, [r7, #8]
 80046aa:	8979      	ldrh	r1, [r7, #10]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	4603      	mov	r3, r0
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f890 	bl	80047dc <I2C_RequestMemoryWrite>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d052      	beq.n	8004768 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e081      	b.n	80047ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f9f2 	bl	8004ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d107      	bne.n	80046ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e06b      	b.n	80047ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d11b      	bne.n	8004768 <HAL_I2C_Mem_Write+0x180>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004734:	2b00      	cmp	r3, #0
 8004736:	d017      	beq.n	8004768 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1aa      	bne.n	80046c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f9de 	bl	8004b36 <I2C_WaitOnBTFFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00d      	beq.n	800479c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	2b04      	cmp	r3, #4
 8004786:	d107      	bne.n	8004798 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004796:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e016      	b.n	80047ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e000      	b.n	80047ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	00100002 	.word	0x00100002
 80047d8:	ffff0000 	.word	0xffff0000

080047dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	4608      	mov	r0, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	461a      	mov	r2, r3
 80047ea:	4603      	mov	r3, r0
 80047ec:	817b      	strh	r3, [r7, #10]
 80047ee:	460b      	mov	r3, r1
 80047f0:	813b      	strh	r3, [r7, #8]
 80047f2:	4613      	mov	r3, r2
 80047f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004804:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	2200      	movs	r2, #0
 800480e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f878 	bl	8004908 <I2C_WaitOnFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00d      	beq.n	800483a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482c:	d103      	bne.n	8004836 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e05f      	b.n	80048fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800483a:	897b      	ldrh	r3, [r7, #10]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004848:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	492d      	ldr	r1, [pc, #180]	; (8004904 <I2C_RequestMemoryWrite+0x128>)
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f8b0 	bl	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e04c      	b.n	80048fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004878:	6a39      	ldr	r1, [r7, #32]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f91a 	bl	8004ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00d      	beq.n	80048a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b04      	cmp	r3, #4
 800488c:	d107      	bne.n	800489e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e02b      	b.n	80048fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d105      	bne.n	80048b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048a8:	893b      	ldrh	r3, [r7, #8]
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	611a      	str	r2, [r3, #16]
 80048b2:	e021      	b.n	80048f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048b4:	893b      	ldrh	r3, [r7, #8]
 80048b6:	0a1b      	lsrs	r3, r3, #8
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c4:	6a39      	ldr	r1, [r7, #32]
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f8f4 	bl	8004ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00d      	beq.n	80048ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d107      	bne.n	80048ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e005      	b.n	80048fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048ee:	893b      	ldrh	r3, [r7, #8]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	00010002 	.word	0x00010002

08004908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004918:	e025      	b.n	8004966 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d021      	beq.n	8004966 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fe fae5 	bl	8002ef0 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d116      	bne.n	8004966 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f043 0220 	orr.w	r2, r3, #32
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e023      	b.n	80049ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d10d      	bne.n	800498c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf0c      	ite	eq
 8004982:	2301      	moveq	r3, #1
 8004984:	2300      	movne	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	e00c      	b.n	80049a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	43da      	mvns	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4013      	ands	r3, r2
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf0c      	ite	eq
 800499e:	2301      	moveq	r3, #1
 80049a0:	2300      	movne	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d0b6      	beq.n	800491a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049c4:	e051      	b.n	8004a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d4:	d123      	bne.n	8004a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f043 0204 	orr.w	r2, r3, #4
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e046      	b.n	8004aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d021      	beq.n	8004a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fe fa63 	bl	8002ef0 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d116      	bne.n	8004a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e020      	b.n	8004aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d10c      	bne.n	8004a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bf14      	ite	ne
 8004a86:	2301      	movne	r3, #1
 8004a88:	2300      	moveq	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	e00b      	b.n	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	43da      	mvns	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf14      	ite	ne
 8004aa0:	2301      	movne	r3, #1
 8004aa2:	2300      	moveq	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d18d      	bne.n	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ac0:	e02d      	b.n	8004b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f878 	bl	8004bb8 <I2C_IsAcknowledgeFailed>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e02d      	b.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d021      	beq.n	8004b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ada:	f7fe fa09 	bl	8002ef0 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d302      	bcc.n	8004af0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d116      	bne.n	8004b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f043 0220 	orr.w	r2, r3, #32
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e007      	b.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b28:	2b80      	cmp	r3, #128	; 0x80
 8004b2a:	d1ca      	bne.n	8004ac2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b42:	e02d      	b.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f837 	bl	8004bb8 <I2C_IsAcknowledgeFailed>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e02d      	b.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5a:	d021      	beq.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5c:	f7fe f9c8 	bl	8002ef0 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d302      	bcc.n	8004b72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d116      	bne.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e007      	b.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d1ca      	bne.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bce:	d11b      	bne.n	8004c08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f043 0204 	orr.w	r2, r3, #4
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e267      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d075      	beq.n	8004d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c36:	4b88      	ldr	r3, [pc, #544]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d00c      	beq.n	8004c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c42:	4b85      	ldr	r3, [pc, #532]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d112      	bne.n	8004c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c4e:	4b82      	ldr	r3, [pc, #520]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c5a:	d10b      	bne.n	8004c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5c:	4b7e      	ldr	r3, [pc, #504]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d05b      	beq.n	8004d20 <HAL_RCC_OscConfig+0x108>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d157      	bne.n	8004d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e242      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7c:	d106      	bne.n	8004c8c <HAL_RCC_OscConfig+0x74>
 8004c7e:	4b76      	ldr	r3, [pc, #472]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a75      	ldr	r2, [pc, #468]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e01d      	b.n	8004cc8 <HAL_RCC_OscConfig+0xb0>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x98>
 8004c96:	4b70      	ldr	r3, [pc, #448]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6f      	ldr	r2, [pc, #444]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	4b6d      	ldr	r3, [pc, #436]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a6c      	ldr	r2, [pc, #432]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e00b      	b.n	8004cc8 <HAL_RCC_OscConfig+0xb0>
 8004cb0:	4b69      	ldr	r3, [pc, #420]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a68      	ldr	r2, [pc, #416]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4b66      	ldr	r3, [pc, #408]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a65      	ldr	r2, [pc, #404]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d013      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd0:	f7fe f90e 	bl	8002ef0 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd8:	f7fe f90a 	bl	8002ef0 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	; 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e207      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cea:	4b5b      	ldr	r3, [pc, #364]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0xc0>
 8004cf6:	e014      	b.n	8004d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fe f8fa 	bl	8002ef0 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d00:	f7fe f8f6 	bl	8002ef0 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	; 0x64
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e1f3      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d12:	4b51      	ldr	r3, [pc, #324]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0xe8>
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d063      	beq.n	8004df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d2e:	4b4a      	ldr	r3, [pc, #296]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d3a:	4b47      	ldr	r3, [pc, #284]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d11c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d46:	4b44      	ldr	r3, [pc, #272]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d116      	bne.n	8004d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d52:	4b41      	ldr	r3, [pc, #260]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_RCC_OscConfig+0x152>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d001      	beq.n	8004d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e1c7      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6a:	4b3b      	ldr	r3, [pc, #236]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4937      	ldr	r1, [pc, #220]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7e:	e03a      	b.n	8004df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d88:	4b34      	ldr	r3, [pc, #208]	; (8004e5c <HAL_RCC_OscConfig+0x244>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fe f8af 	bl	8002ef0 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d96:	f7fe f8ab 	bl	8002ef0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e1a8      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da8:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db4:	4b28      	ldr	r3, [pc, #160]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4925      	ldr	r1, [pc, #148]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]
 8004dc8:	e015      	b.n	8004df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <HAL_RCC_OscConfig+0x244>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fe f88e 	bl	8002ef0 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dd8:	f7fe f88a 	bl	8002ef0 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e187      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dea:	4b1b      	ldr	r3, [pc, #108]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d036      	beq.n	8004e70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e0a:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <HAL_RCC_OscConfig+0x248>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e10:	f7fe f86e 	bl	8002ef0 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e18:	f7fe f86a 	bl	8002ef0 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e167      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x200>
 8004e36:	e01b      	b.n	8004e70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <HAL_RCC_OscConfig+0x248>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3e:	f7fe f857 	bl	8002ef0 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e44:	e00e      	b.n	8004e64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e46:	f7fe f853 	bl	8002ef0 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d907      	bls.n	8004e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e150      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	42470000 	.word	0x42470000
 8004e60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e64:	4b88      	ldr	r3, [pc, #544]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ea      	bne.n	8004e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8097 	beq.w	8004fac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e82:	4b81      	ldr	r3, [pc, #516]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10f      	bne.n	8004eae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	4b7d      	ldr	r3, [pc, #500]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	4a7c      	ldr	r2, [pc, #496]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e9e:	4b7a      	ldr	r3, [pc, #488]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	60bb      	str	r3, [r7, #8]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eae:	4b77      	ldr	r3, [pc, #476]	; (800508c <HAL_RCC_OscConfig+0x474>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d118      	bne.n	8004eec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eba:	4b74      	ldr	r3, [pc, #464]	; (800508c <HAL_RCC_OscConfig+0x474>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a73      	ldr	r2, [pc, #460]	; (800508c <HAL_RCC_OscConfig+0x474>)
 8004ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec6:	f7fe f813 	bl	8002ef0 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ece:	f7fe f80f 	bl	8002ef0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e10c      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee0:	4b6a      	ldr	r3, [pc, #424]	; (800508c <HAL_RCC_OscConfig+0x474>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d106      	bne.n	8004f02 <HAL_RCC_OscConfig+0x2ea>
 8004ef4:	4b64      	ldr	r3, [pc, #400]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	4a63      	ldr	r2, [pc, #396]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	6713      	str	r3, [r2, #112]	; 0x70
 8004f00:	e01c      	b.n	8004f3c <HAL_RCC_OscConfig+0x324>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b05      	cmp	r3, #5
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x30c>
 8004f0a:	4b5f      	ldr	r3, [pc, #380]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	4a5e      	ldr	r2, [pc, #376]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004f10:	f043 0304 	orr.w	r3, r3, #4
 8004f14:	6713      	str	r3, [r2, #112]	; 0x70
 8004f16:	4b5c      	ldr	r3, [pc, #368]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	4a5b      	ldr	r2, [pc, #364]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	f043 0301 	orr.w	r3, r3, #1
 8004f20:	6713      	str	r3, [r2, #112]	; 0x70
 8004f22:	e00b      	b.n	8004f3c <HAL_RCC_OscConfig+0x324>
 8004f24:	4b58      	ldr	r3, [pc, #352]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	4a57      	ldr	r2, [pc, #348]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f30:	4b55      	ldr	r3, [pc, #340]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	4a54      	ldr	r2, [pc, #336]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004f36:	f023 0304 	bic.w	r3, r3, #4
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d015      	beq.n	8004f70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fd ffd4 	bl	8002ef0 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f4c:	f7fd ffd0 	bl	8002ef0 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e0cb      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f62:	4b49      	ldr	r3, [pc, #292]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0ee      	beq.n	8004f4c <HAL_RCC_OscConfig+0x334>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f70:	f7fd ffbe 	bl	8002ef0 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f78:	f7fd ffba 	bl	8002ef0 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e0b5      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8e:	4b3e      	ldr	r3, [pc, #248]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1ee      	bne.n	8004f78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa0:	4b39      	ldr	r3, [pc, #228]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	4a38      	ldr	r2, [pc, #224]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004faa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80a1 	beq.w	80050f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fb6:	4b34      	ldr	r3, [pc, #208]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d05c      	beq.n	800507c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d141      	bne.n	800504e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fca:	4b31      	ldr	r3, [pc, #196]	; (8005090 <HAL_RCC_OscConfig+0x478>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd0:	f7fd ff8e 	bl	8002ef0 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd ff8a 	bl	8002ef0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e087      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	4b27      	ldr	r3, [pc, #156]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	019b      	lsls	r3, r3, #6
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	3b01      	subs	r3, #1
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	061b      	lsls	r3, r3, #24
 800501a:	491b      	ldr	r1, [pc, #108]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 800501c:	4313      	orrs	r3, r2
 800501e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_RCC_OscConfig+0x478>)
 8005022:	2201      	movs	r2, #1
 8005024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005026:	f7fd ff63 	bl	8002ef0 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800502e:	f7fd ff5f 	bl	8002ef0 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e05c      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005040:	4b11      	ldr	r3, [pc, #68]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x416>
 800504c:	e054      	b.n	80050f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <HAL_RCC_OscConfig+0x478>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7fd ff4c 	bl	8002ef0 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800505c:	f7fd ff48 	bl	8002ef0 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e045      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_RCC_OscConfig+0x470>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x444>
 800507a:	e03d      	b.n	80050f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d107      	bne.n	8005094 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e038      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
 8005088:	40023800 	.word	0x40023800
 800508c:	40007000 	.word	0x40007000
 8005090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <HAL_RCC_OscConfig+0x4ec>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d028      	beq.n	80050f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d121      	bne.n	80050f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d11a      	bne.n	80050f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050c4:	4013      	ands	r3, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d111      	bne.n	80050f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	3b01      	subs	r3, #1
 80050de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d001      	beq.n	80050f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40023800 	.word	0x40023800

08005108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0cc      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800511c:	4b68      	ldr	r3, [pc, #416]	; (80052c0 <HAL_RCC_ClockConfig+0x1b8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d90c      	bls.n	8005144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b65      	ldr	r3, [pc, #404]	; (80052c0 <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005132:	4b63      	ldr	r3, [pc, #396]	; (80052c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0b8      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d020      	beq.n	8005192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800515c:	4b59      	ldr	r3, [pc, #356]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4a58      	ldr	r2, [pc, #352]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005174:	4b53      	ldr	r3, [pc, #332]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4a52      	ldr	r2, [pc, #328]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800517e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005180:	4b50      	ldr	r3, [pc, #320]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	494d      	ldr	r1, [pc, #308]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d044      	beq.n	8005228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d107      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a6:	4b47      	ldr	r3, [pc, #284]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d119      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e07f      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d003      	beq.n	80051c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d107      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c6:	4b3f      	ldr	r3, [pc, #252]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e06f      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d6:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e067      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051e6:	4b37      	ldr	r3, [pc, #220]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f023 0203 	bic.w	r2, r3, #3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	4934      	ldr	r1, [pc, #208]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051f8:	f7fd fe7a 	bl	8002ef0 <HAL_GetTick>
 80051fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fe:	e00a      	b.n	8005216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005200:	f7fd fe76 	bl	8002ef0 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f241 3288 	movw	r2, #5000	; 0x1388
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e04f      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005216:	4b2b      	ldr	r3, [pc, #172]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 020c 	and.w	r2, r3, #12
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	429a      	cmp	r2, r3
 8005226:	d1eb      	bne.n	8005200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005228:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <HAL_RCC_ClockConfig+0x1b8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d20c      	bcs.n	8005250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005236:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800523e:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d001      	beq.n	8005250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e032      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800525c:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4916      	ldr	r1, [pc, #88]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800527a:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	490e      	ldr	r1, [pc, #56]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	4313      	orrs	r3, r2
 800528c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800528e:	f000 f821 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 8005292:	4602      	mov	r2, r0
 8005294:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	490a      	ldr	r1, [pc, #40]	; (80052c8 <HAL_RCC_ClockConfig+0x1c0>)
 80052a0:	5ccb      	ldrb	r3, [r1, r3]
 80052a2:	fa22 f303 	lsr.w	r3, r2, r3
 80052a6:	4a09      	ldr	r2, [pc, #36]	; (80052cc <HAL_RCC_ClockConfig+0x1c4>)
 80052a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052aa:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fd fdda 	bl	8002e68 <HAL_InitTick>

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40023c00 	.word	0x40023c00
 80052c4:	40023800 	.word	0x40023800
 80052c8:	0800602c 	.word	0x0800602c
 80052cc:	20003fa4 	.word	0x20003fa4
 80052d0:	20003fa8 	.word	0x20003fa8

080052d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d8:	b090      	sub	sp, #64	; 0x40
 80052da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	637b      	str	r3, [r7, #52]	; 0x34
 80052e0:	2300      	movs	r3, #0
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e4:	2300      	movs	r3, #0
 80052e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052ec:	4b59      	ldr	r3, [pc, #356]	; (8005454 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 030c 	and.w	r3, r3, #12
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d00d      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0x40>
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	f200 80a1 	bhi.w	8005440 <HAL_RCC_GetSysClockFreq+0x16c>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x34>
 8005302:	2b04      	cmp	r3, #4
 8005304:	d003      	beq.n	800530e <HAL_RCC_GetSysClockFreq+0x3a>
 8005306:	e09b      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005308:	4b53      	ldr	r3, [pc, #332]	; (8005458 <HAL_RCC_GetSysClockFreq+0x184>)
 800530a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800530c:	e09b      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800530e:	4b53      	ldr	r3, [pc, #332]	; (800545c <HAL_RCC_GetSysClockFreq+0x188>)
 8005310:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005312:	e098      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005314:	4b4f      	ldr	r3, [pc, #316]	; (8005454 <HAL_RCC_GetSysClockFreq+0x180>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800531e:	4b4d      	ldr	r3, [pc, #308]	; (8005454 <HAL_RCC_GetSysClockFreq+0x180>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d028      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800532a:	4b4a      	ldr	r3, [pc, #296]	; (8005454 <HAL_RCC_GetSysClockFreq+0x180>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	099b      	lsrs	r3, r3, #6
 8005330:	2200      	movs	r2, #0
 8005332:	623b      	str	r3, [r7, #32]
 8005334:	627a      	str	r2, [r7, #36]	; 0x24
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800533c:	2100      	movs	r1, #0
 800533e:	4b47      	ldr	r3, [pc, #284]	; (800545c <HAL_RCC_GetSysClockFreq+0x188>)
 8005340:	fb03 f201 	mul.w	r2, r3, r1
 8005344:	2300      	movs	r3, #0
 8005346:	fb00 f303 	mul.w	r3, r0, r3
 800534a:	4413      	add	r3, r2
 800534c:	4a43      	ldr	r2, [pc, #268]	; (800545c <HAL_RCC_GetSysClockFreq+0x188>)
 800534e:	fba0 1202 	umull	r1, r2, r0, r2
 8005352:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005354:	460a      	mov	r2, r1
 8005356:	62ba      	str	r2, [r7, #40]	; 0x28
 8005358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535a:	4413      	add	r3, r2
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005360:	2200      	movs	r2, #0
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	61fa      	str	r2, [r7, #28]
 8005366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800536a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800536e:	f7fb fbbf 	bl	8000af0 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4613      	mov	r3, r2
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537a:	e053      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537c:	4b35      	ldr	r3, [pc, #212]	; (8005454 <HAL_RCC_GetSysClockFreq+0x180>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	099b      	lsrs	r3, r3, #6
 8005382:	2200      	movs	r2, #0
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	617a      	str	r2, [r7, #20]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800538e:	f04f 0b00 	mov.w	fp, #0
 8005392:	4652      	mov	r2, sl
 8005394:	465b      	mov	r3, fp
 8005396:	f04f 0000 	mov.w	r0, #0
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	0159      	lsls	r1, r3, #5
 80053a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a4:	0150      	lsls	r0, r2, #5
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	ebb2 080a 	subs.w	r8, r2, sl
 80053ae:	eb63 090b 	sbc.w	r9, r3, fp
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80053be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80053c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80053c6:	ebb2 0408 	subs.w	r4, r2, r8
 80053ca:	eb63 0509 	sbc.w	r5, r3, r9
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	00eb      	lsls	r3, r5, #3
 80053d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053dc:	00e2      	lsls	r2, r4, #3
 80053de:	4614      	mov	r4, r2
 80053e0:	461d      	mov	r5, r3
 80053e2:	eb14 030a 	adds.w	r3, r4, sl
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	eb45 030b 	adc.w	r3, r5, fp
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053fa:	4629      	mov	r1, r5
 80053fc:	028b      	lsls	r3, r1, #10
 80053fe:	4621      	mov	r1, r4
 8005400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005404:	4621      	mov	r1, r4
 8005406:	028a      	lsls	r2, r1, #10
 8005408:	4610      	mov	r0, r2
 800540a:	4619      	mov	r1, r3
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	2200      	movs	r2, #0
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	60fa      	str	r2, [r7, #12]
 8005414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005418:	f7fb fb6a 	bl	8000af0 <__aeabi_uldivmod>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4613      	mov	r3, r2
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <HAL_RCC_GetSysClockFreq+0x180>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	3301      	adds	r3, #1
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800543e:	e002      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_RCC_GetSysClockFreq+0x184>)
 8005442:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005448:	4618      	mov	r0, r3
 800544a:	3740      	adds	r7, #64	; 0x40
 800544c:	46bd      	mov	sp, r7
 800544e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005452:	bf00      	nop
 8005454:	40023800 	.word	0x40023800
 8005458:	00f42400 	.word	0x00f42400
 800545c:	019bfcc0 	.word	0x019bfcc0

08005460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005464:	4b03      	ldr	r3, [pc, #12]	; (8005474 <HAL_RCC_GetHCLKFreq+0x14>)
 8005466:	681b      	ldr	r3, [r3, #0]
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20003fa4 	.word	0x20003fa4

08005478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800547c:	f7ff fff0 	bl	8005460 <HAL_RCC_GetHCLKFreq>
 8005480:	4602      	mov	r2, r0
 8005482:	4b05      	ldr	r3, [pc, #20]	; (8005498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	0a9b      	lsrs	r3, r3, #10
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	4903      	ldr	r1, [pc, #12]	; (800549c <HAL_RCC_GetPCLK1Freq+0x24>)
 800548e:	5ccb      	ldrb	r3, [r1, r3]
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40023800 	.word	0x40023800
 800549c:	0800603c 	.word	0x0800603c

080054a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e041      	b.n	8005536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fd fc06 	bl	8002cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f000 f950 	bl	8005784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	d001      	beq.n	8005558 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e03c      	b.n	80055d2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a1e      	ldr	r2, [pc, #120]	; (80055e0 <HAL_TIM_Base_Start+0xa0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d018      	beq.n	800559c <HAL_TIM_Base_Start+0x5c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005572:	d013      	beq.n	800559c <HAL_TIM_Base_Start+0x5c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1a      	ldr	r2, [pc, #104]	; (80055e4 <HAL_TIM_Base_Start+0xa4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00e      	beq.n	800559c <HAL_TIM_Base_Start+0x5c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <HAL_TIM_Base_Start+0xa8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d009      	beq.n	800559c <HAL_TIM_Base_Start+0x5c>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a17      	ldr	r2, [pc, #92]	; (80055ec <HAL_TIM_Base_Start+0xac>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_TIM_Base_Start+0x5c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <HAL_TIM_Base_Start+0xb0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d111      	bne.n	80055c0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d010      	beq.n	80055d0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055be:	e007      	b.n	80055d0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40010000 	.word	0x40010000
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40000c00 	.word	0x40000c00
 80055f0:	40014000 	.word	0x40014000

080055f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_TIM_ConfigClockSource+0x1c>
 800560c:	2302      	movs	r3, #2
 800560e:	e0b4      	b.n	800577a <HAL_TIM_ConfigClockSource+0x186>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800562e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005648:	d03e      	beq.n	80056c8 <HAL_TIM_ConfigClockSource+0xd4>
 800564a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564e:	f200 8087 	bhi.w	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005656:	f000 8086 	beq.w	8005766 <HAL_TIM_ConfigClockSource+0x172>
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565e:	d87f      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005660:	2b70      	cmp	r3, #112	; 0x70
 8005662:	d01a      	beq.n	800569a <HAL_TIM_ConfigClockSource+0xa6>
 8005664:	2b70      	cmp	r3, #112	; 0x70
 8005666:	d87b      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005668:	2b60      	cmp	r3, #96	; 0x60
 800566a:	d050      	beq.n	800570e <HAL_TIM_ConfigClockSource+0x11a>
 800566c:	2b60      	cmp	r3, #96	; 0x60
 800566e:	d877      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b50      	cmp	r3, #80	; 0x50
 8005672:	d03c      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0xfa>
 8005674:	2b50      	cmp	r3, #80	; 0x50
 8005676:	d873      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d058      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x13a>
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	d86f      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b30      	cmp	r3, #48	; 0x30
 8005682:	d064      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 8005684:	2b30      	cmp	r3, #48	; 0x30
 8005686:	d86b      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005688:	2b20      	cmp	r3, #32
 800568a:	d060      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 800568c:	2b20      	cmp	r3, #32
 800568e:	d867      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d05c      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 8005694:	2b10      	cmp	r3, #16
 8005696:	d05a      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 8005698:	e062      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6899      	ldr	r1, [r3, #8]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f000 f965 	bl	8005978 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	609a      	str	r2, [r3, #8]
      break;
 80056c6:	e04f      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6899      	ldr	r1, [r3, #8]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f000 f94e 	bl	8005978 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ea:	609a      	str	r2, [r3, #8]
      break;
 80056ec:	e03c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6859      	ldr	r1, [r3, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f000 f8c2 	bl	8005884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2150      	movs	r1, #80	; 0x50
 8005706:	4618      	mov	r0, r3
 8005708:	f000 f91b 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 800570c:	e02c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6859      	ldr	r1, [r3, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	461a      	mov	r2, r3
 800571c:	f000 f8e1 	bl	80058e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2160      	movs	r1, #96	; 0x60
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f90b 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 800572c:	e01c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6859      	ldr	r1, [r3, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	461a      	mov	r2, r3
 800573c:	f000 f8a2 	bl	8005884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2140      	movs	r1, #64	; 0x40
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f8fb 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 800574c:	e00c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f000 f8f2 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 800575e:	e003      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      break;
 8005764:	e000      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a34      	ldr	r2, [pc, #208]	; (8005868 <TIM_Base_SetConfig+0xe4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00f      	beq.n	80057bc <TIM_Base_SetConfig+0x38>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a2:	d00b      	beq.n	80057bc <TIM_Base_SetConfig+0x38>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a31      	ldr	r2, [pc, #196]	; (800586c <TIM_Base_SetConfig+0xe8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <TIM_Base_SetConfig+0x38>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a30      	ldr	r2, [pc, #192]	; (8005870 <TIM_Base_SetConfig+0xec>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_Base_SetConfig+0x38>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a2f      	ldr	r2, [pc, #188]	; (8005874 <TIM_Base_SetConfig+0xf0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d108      	bne.n	80057ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a25      	ldr	r2, [pc, #148]	; (8005868 <TIM_Base_SetConfig+0xe4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d01b      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057dc:	d017      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a22      	ldr	r2, [pc, #136]	; (800586c <TIM_Base_SetConfig+0xe8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a21      	ldr	r2, [pc, #132]	; (8005870 <TIM_Base_SetConfig+0xec>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00f      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a20      	ldr	r2, [pc, #128]	; (8005874 <TIM_Base_SetConfig+0xf0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00b      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <TIM_Base_SetConfig+0xf4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d007      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1e      	ldr	r2, [pc, #120]	; (800587c <TIM_Base_SetConfig+0xf8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d003      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1d      	ldr	r2, [pc, #116]	; (8005880 <TIM_Base_SetConfig+0xfc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d108      	bne.n	8005820 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a08      	ldr	r2, [pc, #32]	; (8005868 <TIM_Base_SetConfig+0xe4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d103      	bne.n	8005854 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	615a      	str	r2, [r3, #20]
}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40010000 	.word	0x40010000
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800
 8005874:	40000c00 	.word	0x40000c00
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800

08005884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f023 0201 	bic.w	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f023 030a 	bic.w	r3, r3, #10
 80058c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b087      	sub	sp, #28
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f023 0210 	bic.w	r2, r3, #16
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800590c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	031b      	lsls	r3, r3, #12
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800591e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	f043 0307 	orr.w	r3, r3, #7
 8005964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	021a      	lsls	r2, r3, #8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	431a      	orrs	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4313      	orrs	r3, r2
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	609a      	str	r2, [r3, #8]
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e050      	b.n	8005a72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1c      	ldr	r2, [pc, #112]	; (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d018      	beq.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1c:	d013      	beq.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a18      	ldr	r2, [pc, #96]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00e      	beq.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d009      	beq.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d004      	beq.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d10c      	bne.n	8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40010000 	.word	0x40010000
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800
 8005a8c:	40000c00 	.word	0x40000c00
 8005a90:	40014000 	.word	0x40014000

08005a94 <memset>:
 8005a94:	4402      	add	r2, r0
 8005a96:	4603      	mov	r3, r0
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d100      	bne.n	8005a9e <memset+0xa>
 8005a9c:	4770      	bx	lr
 8005a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa2:	e7f9      	b.n	8005a98 <memset+0x4>

08005aa4 <__errno>:
 8005aa4:	4b01      	ldr	r3, [pc, #4]	; (8005aac <__errno+0x8>)
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	20003ffc 	.word	0x20003ffc

08005ab0 <__libc_init_array>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4d0d      	ldr	r5, [pc, #52]	; (8005ae8 <__libc_init_array+0x38>)
 8005ab4:	4c0d      	ldr	r4, [pc, #52]	; (8005aec <__libc_init_array+0x3c>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	2600      	movs	r6, #0
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	d109      	bne.n	8005ad4 <__libc_init_array+0x24>
 8005ac0:	4d0b      	ldr	r5, [pc, #44]	; (8005af0 <__libc_init_array+0x40>)
 8005ac2:	4c0c      	ldr	r4, [pc, #48]	; (8005af4 <__libc_init_array+0x44>)
 8005ac4:	f000 faa6 	bl	8006014 <_init>
 8005ac8:	1b64      	subs	r4, r4, r5
 8005aca:	10a4      	asrs	r4, r4, #2
 8005acc:	2600      	movs	r6, #0
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	d105      	bne.n	8005ade <__libc_init_array+0x2e>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad8:	4798      	blx	r3
 8005ada:	3601      	adds	r6, #1
 8005adc:	e7ee      	b.n	8005abc <__libc_init_array+0xc>
 8005ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae2:	4798      	blx	r3
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	e7f2      	b.n	8005ace <__libc_init_array+0x1e>
 8005ae8:	08006058 	.word	0x08006058
 8005aec:	08006058 	.word	0x08006058
 8005af0:	08006058 	.word	0x08006058
 8005af4:	0800605c 	.word	0x0800605c

08005af8 <log10>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	ed2d 8b02 	vpush	{d8}
 8005afe:	ec55 4b10 	vmov	r4, r5, d0
 8005b02:	f000 f841 	bl	8005b88 <__ieee754_log10>
 8005b06:	4622      	mov	r2, r4
 8005b08:	462b      	mov	r3, r5
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	eeb0 8a40 	vmov.f32	s16, s0
 8005b12:	eef0 8a60 	vmov.f32	s17, s1
 8005b16:	f7fa ffb5 	bl	8000a84 <__aeabi_dcmpun>
 8005b1a:	b998      	cbnz	r0, 8005b44 <log10+0x4c>
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2300      	movs	r3, #0
 8005b20:	4620      	mov	r0, r4
 8005b22:	4629      	mov	r1, r5
 8005b24:	f7fa ff90 	bl	8000a48 <__aeabi_dcmple>
 8005b28:	b160      	cbz	r0, 8005b44 <log10+0x4c>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4620      	mov	r0, r4
 8005b30:	4629      	mov	r1, r5
 8005b32:	f7fa ff75 	bl	8000a20 <__aeabi_dcmpeq>
 8005b36:	b160      	cbz	r0, 8005b52 <log10+0x5a>
 8005b38:	f7ff ffb4 	bl	8005aa4 <__errno>
 8005b3c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005b68 <log10+0x70>
 8005b40:	2322      	movs	r3, #34	; 0x22
 8005b42:	6003      	str	r3, [r0, #0]
 8005b44:	eeb0 0a48 	vmov.f32	s0, s16
 8005b48:	eef0 0a68 	vmov.f32	s1, s17
 8005b4c:	ecbd 8b02 	vpop	{d8}
 8005b50:	bd38      	pop	{r3, r4, r5, pc}
 8005b52:	f7ff ffa7 	bl	8005aa4 <__errno>
 8005b56:	ecbd 8b02 	vpop	{d8}
 8005b5a:	2321      	movs	r3, #33	; 0x21
 8005b5c:	6003      	str	r3, [r0, #0]
 8005b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b62:	4803      	ldr	r0, [pc, #12]	; (8005b70 <log10+0x78>)
 8005b64:	f000 b808 	b.w	8005b78 <nan>
 8005b68:	00000000 	.word	0x00000000
 8005b6c:	fff00000 	.word	0xfff00000
 8005b70:	0800604c 	.word	0x0800604c
 8005b74:	00000000 	.word	0x00000000

08005b78 <nan>:
 8005b78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005b80 <nan+0x8>
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	00000000 	.word	0x00000000
 8005b84:	7ff80000 	.word	0x7ff80000

08005b88 <__ieee754_log10>:
 8005b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b8c:	ec55 4b10 	vmov	r4, r5, d0
 8005b90:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8005b94:	462b      	mov	r3, r5
 8005b96:	da2f      	bge.n	8005bf8 <__ieee754_log10+0x70>
 8005b98:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005b9c:	4322      	orrs	r2, r4
 8005b9e:	d109      	bne.n	8005bb4 <__ieee754_log10+0x2c>
 8005ba0:	493b      	ldr	r1, [pc, #236]	; (8005c90 <__ieee754_log10+0x108>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	f7fa fdfc 	bl	80007a4 <__aeabi_ddiv>
 8005bac:	ec41 0b10 	vmov	d0, r0, r1
 8005bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb4:	2d00      	cmp	r5, #0
 8005bb6:	da09      	bge.n	8005bcc <__ieee754_log10+0x44>
 8005bb8:	ee10 2a10 	vmov	r2, s0
 8005bbc:	ee10 0a10 	vmov	r0, s0
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f7fa fb0d 	bl	80001e0 <__aeabi_dsub>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e7ed      	b.n	8005ba8 <__ieee754_log10+0x20>
 8005bcc:	4b31      	ldr	r3, [pc, #196]	; (8005c94 <__ieee754_log10+0x10c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	ee10 0a10 	vmov	r0, s0
 8005bd6:	f7fa fcbb 	bl	8000550 <__aeabi_dmul>
 8005bda:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005bde:	4604      	mov	r4, r0
 8005be0:	460d      	mov	r5, r1
 8005be2:	460b      	mov	r3, r1
 8005be4:	492c      	ldr	r1, [pc, #176]	; (8005c98 <__ieee754_log10+0x110>)
 8005be6:	428b      	cmp	r3, r1
 8005be8:	dd08      	ble.n	8005bfc <__ieee754_log10+0x74>
 8005bea:	4622      	mov	r2, r4
 8005bec:	462b      	mov	r3, r5
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa faf7 	bl	80001e4 <__adddf3>
 8005bf6:	e7d9      	b.n	8005bac <__ieee754_log10+0x24>
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	e7f3      	b.n	8005be4 <__ieee754_log10+0x5c>
 8005bfc:	1518      	asrs	r0, r3, #20
 8005bfe:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005c02:	4410      	add	r0, r2
 8005c04:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005c08:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005c0c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005c10:	f7fa fc34 	bl	800047c <__aeabi_i2d>
 8005c14:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8005c18:	3303      	adds	r3, #3
 8005c1a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8005c1e:	ec45 4b10 	vmov	d0, r4, r5
 8005c22:	4606      	mov	r6, r0
 8005c24:	460f      	mov	r7, r1
 8005c26:	f000 f83b 	bl	8005ca0 <__ieee754_log>
 8005c2a:	a313      	add	r3, pc, #76	; (adr r3, 8005c78 <__ieee754_log10+0xf0>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	4630      	mov	r0, r6
 8005c32:	4639      	mov	r1, r7
 8005c34:	ec59 8b10 	vmov	r8, r9, d0
 8005c38:	f7fa fc8a 	bl	8000550 <__aeabi_dmul>
 8005c3c:	a310      	add	r3, pc, #64	; (adr r3, 8005c80 <__ieee754_log10+0xf8>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	4604      	mov	r4, r0
 8005c44:	460d      	mov	r5, r1
 8005c46:	4640      	mov	r0, r8
 8005c48:	4649      	mov	r1, r9
 8005c4a:	f7fa fc81 	bl	8000550 <__aeabi_dmul>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4620      	mov	r0, r4
 8005c54:	4629      	mov	r1, r5
 8005c56:	f7fa fac5 	bl	80001e4 <__adddf3>
 8005c5a:	a30b      	add	r3, pc, #44	; (adr r3, 8005c88 <__ieee754_log10+0x100>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	4604      	mov	r4, r0
 8005c62:	460d      	mov	r5, r1
 8005c64:	4630      	mov	r0, r6
 8005c66:	4639      	mov	r1, r7
 8005c68:	f7fa fc72 	bl	8000550 <__aeabi_dmul>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4620      	mov	r0, r4
 8005c72:	4629      	mov	r1, r5
 8005c74:	e7bd      	b.n	8005bf2 <__ieee754_log10+0x6a>
 8005c76:	bf00      	nop
 8005c78:	11f12b36 	.word	0x11f12b36
 8005c7c:	3d59fef3 	.word	0x3d59fef3
 8005c80:	1526e50e 	.word	0x1526e50e
 8005c84:	3fdbcb7b 	.word	0x3fdbcb7b
 8005c88:	509f6000 	.word	0x509f6000
 8005c8c:	3fd34413 	.word	0x3fd34413
 8005c90:	c3500000 	.word	0xc3500000
 8005c94:	43500000 	.word	0x43500000
 8005c98:	7fefffff 	.word	0x7fefffff
 8005c9c:	00000000 	.word	0x00000000

08005ca0 <__ieee754_log>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	ec51 0b10 	vmov	r0, r1, d0
 8005ca8:	ed2d 8b04 	vpush	{d8-d9}
 8005cac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	460d      	mov	r5, r1
 8005cb4:	da29      	bge.n	8005d0a <__ieee754_log+0x6a>
 8005cb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005cba:	4303      	orrs	r3, r0
 8005cbc:	ee10 2a10 	vmov	r2, s0
 8005cc0:	d10c      	bne.n	8005cdc <__ieee754_log+0x3c>
 8005cc2:	49cf      	ldr	r1, [pc, #828]	; (8006000 <__ieee754_log+0x360>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f7fa fd6b 	bl	80007a4 <__aeabi_ddiv>
 8005cce:	ec41 0b10 	vmov	d0, r0, r1
 8005cd2:	b003      	add	sp, #12
 8005cd4:	ecbd 8b04 	vpop	{d8-d9}
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cdc:	2900      	cmp	r1, #0
 8005cde:	da05      	bge.n	8005cec <__ieee754_log+0x4c>
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	f7fa fa7d 	bl	80001e0 <__aeabi_dsub>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e7ee      	b.n	8005cca <__ieee754_log+0x2a>
 8005cec:	4bc5      	ldr	r3, [pc, #788]	; (8006004 <__ieee754_log+0x364>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f7fa fc2e 	bl	8000550 <__aeabi_dmul>
 8005cf4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005cf8:	460d      	mov	r5, r1
 8005cfa:	4ac3      	ldr	r2, [pc, #780]	; (8006008 <__ieee754_log+0x368>)
 8005cfc:	4295      	cmp	r5, r2
 8005cfe:	dd06      	ble.n	8005d0e <__ieee754_log+0x6e>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	f7fa fa6e 	bl	80001e4 <__adddf3>
 8005d08:	e7e1      	b.n	8005cce <__ieee754_log+0x2e>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e7f5      	b.n	8005cfa <__ieee754_log+0x5a>
 8005d0e:	152c      	asrs	r4, r5, #20
 8005d10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005d14:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005d18:	441c      	add	r4, r3
 8005d1a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005d1e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d26:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005d2a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005d2e:	ea42 0105 	orr.w	r1, r2, r5
 8005d32:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005d36:	2200      	movs	r2, #0
 8005d38:	4bb4      	ldr	r3, [pc, #720]	; (800600c <__ieee754_log+0x36c>)
 8005d3a:	f7fa fa51 	bl	80001e0 <__aeabi_dsub>
 8005d3e:	1cab      	adds	r3, r5, #2
 8005d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	4682      	mov	sl, r0
 8005d48:	468b      	mov	fp, r1
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	dc53      	bgt.n	8005df8 <__ieee754_log+0x158>
 8005d50:	2300      	movs	r3, #0
 8005d52:	f7fa fe65 	bl	8000a20 <__aeabi_dcmpeq>
 8005d56:	b1d0      	cbz	r0, 8005d8e <__ieee754_log+0xee>
 8005d58:	2c00      	cmp	r4, #0
 8005d5a:	f000 8122 	beq.w	8005fa2 <__ieee754_log+0x302>
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f7fa fb8c 	bl	800047c <__aeabi_i2d>
 8005d64:	a390      	add	r3, pc, #576	; (adr r3, 8005fa8 <__ieee754_log+0x308>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	460f      	mov	r7, r1
 8005d6e:	f7fa fbef 	bl	8000550 <__aeabi_dmul>
 8005d72:	a38f      	add	r3, pc, #572	; (adr r3, 8005fb0 <__ieee754_log+0x310>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	4604      	mov	r4, r0
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	4639      	mov	r1, r7
 8005d80:	f7fa fbe6 	bl	8000550 <__aeabi_dmul>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4620      	mov	r0, r4
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	e7ba      	b.n	8005d04 <__ieee754_log+0x64>
 8005d8e:	a38a      	add	r3, pc, #552	; (adr r3, 8005fb8 <__ieee754_log+0x318>)
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	4650      	mov	r0, sl
 8005d96:	4659      	mov	r1, fp
 8005d98:	f7fa fbda 	bl	8000550 <__aeabi_dmul>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	2000      	movs	r0, #0
 8005da2:	499b      	ldr	r1, [pc, #620]	; (8006010 <__ieee754_log+0x370>)
 8005da4:	f7fa fa1c 	bl	80001e0 <__aeabi_dsub>
 8005da8:	4652      	mov	r2, sl
 8005daa:	4606      	mov	r6, r0
 8005dac:	460f      	mov	r7, r1
 8005dae:	465b      	mov	r3, fp
 8005db0:	4650      	mov	r0, sl
 8005db2:	4659      	mov	r1, fp
 8005db4:	f7fa fbcc 	bl	8000550 <__aeabi_dmul>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	f7fa fbc6 	bl	8000550 <__aeabi_dmul>
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	460f      	mov	r7, r1
 8005dc8:	b914      	cbnz	r4, 8005dd0 <__ieee754_log+0x130>
 8005dca:	4632      	mov	r2, r6
 8005dcc:	463b      	mov	r3, r7
 8005dce:	e0a2      	b.n	8005f16 <__ieee754_log+0x276>
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f7fa fb53 	bl	800047c <__aeabi_i2d>
 8005dd6:	a374      	add	r3, pc, #464	; (adr r3, 8005fa8 <__ieee754_log+0x308>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4689      	mov	r9, r1
 8005de0:	f7fa fbb6 	bl	8000550 <__aeabi_dmul>
 8005de4:	a372      	add	r3, pc, #456	; (adr r3, 8005fb0 <__ieee754_log+0x310>)
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	4604      	mov	r4, r0
 8005dec:	460d      	mov	r5, r1
 8005dee:	4640      	mov	r0, r8
 8005df0:	4649      	mov	r1, r9
 8005df2:	f7fa fbad 	bl	8000550 <__aeabi_dmul>
 8005df6:	e0a7      	b.n	8005f48 <__ieee754_log+0x2a8>
 8005df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dfc:	f7fa f9f2 	bl	80001e4 <__adddf3>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4650      	mov	r0, sl
 8005e06:	4659      	mov	r1, fp
 8005e08:	f7fa fccc 	bl	80007a4 <__aeabi_ddiv>
 8005e0c:	ec41 0b18 	vmov	d8, r0, r1
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7fa fb33 	bl	800047c <__aeabi_i2d>
 8005e16:	ec53 2b18 	vmov	r2, r3, d8
 8005e1a:	ec41 0b19 	vmov	d9, r0, r1
 8005e1e:	ec51 0b18 	vmov	r0, r1, d8
 8005e22:	f7fa fb95 	bl	8000550 <__aeabi_dmul>
 8005e26:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8005e2a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4680      	mov	r8, r0
 8005e36:	4689      	mov	r9, r1
 8005e38:	f7fa fb8a 	bl	8000550 <__aeabi_dmul>
 8005e3c:	a360      	add	r3, pc, #384	; (adr r3, 8005fc0 <__ieee754_log+0x320>)
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	4606      	mov	r6, r0
 8005e44:	460f      	mov	r7, r1
 8005e46:	f7fa fb83 	bl	8000550 <__aeabi_dmul>
 8005e4a:	a35f      	add	r3, pc, #380	; (adr r3, 8005fc8 <__ieee754_log+0x328>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa f9c8 	bl	80001e4 <__adddf3>
 8005e54:	4632      	mov	r2, r6
 8005e56:	463b      	mov	r3, r7
 8005e58:	f7fa fb7a 	bl	8000550 <__aeabi_dmul>
 8005e5c:	a35c      	add	r3, pc, #368	; (adr r3, 8005fd0 <__ieee754_log+0x330>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa f9bf 	bl	80001e4 <__adddf3>
 8005e66:	4632      	mov	r2, r6
 8005e68:	463b      	mov	r3, r7
 8005e6a:	f7fa fb71 	bl	8000550 <__aeabi_dmul>
 8005e6e:	a35a      	add	r3, pc, #360	; (adr r3, 8005fd8 <__ieee754_log+0x338>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa f9b6 	bl	80001e4 <__adddf3>
 8005e78:	4642      	mov	r2, r8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	f7fa fb68 	bl	8000550 <__aeabi_dmul>
 8005e80:	a357      	add	r3, pc, #348	; (adr r3, 8005fe0 <__ieee754_log+0x340>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	4680      	mov	r8, r0
 8005e88:	4689      	mov	r9, r1
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	f7fa fb5f 	bl	8000550 <__aeabi_dmul>
 8005e92:	a355      	add	r3, pc, #340	; (adr r3, 8005fe8 <__ieee754_log+0x348>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa f9a4 	bl	80001e4 <__adddf3>
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	f7fa fb56 	bl	8000550 <__aeabi_dmul>
 8005ea4:	a352      	add	r3, pc, #328	; (adr r3, 8005ff0 <__ieee754_log+0x350>)
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	f7fa f99b 	bl	80001e4 <__adddf3>
 8005eae:	4632      	mov	r2, r6
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	f7fa fb4d 	bl	8000550 <__aeabi_dmul>
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	f7fa f991 	bl	80001e4 <__adddf3>
 8005ec2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005ec6:	9b01      	ldr	r3, [sp, #4]
 8005ec8:	3551      	adds	r5, #81	; 0x51
 8005eca:	431d      	orrs	r5, r3
 8005ecc:	2d00      	cmp	r5, #0
 8005ece:	4680      	mov	r8, r0
 8005ed0:	4689      	mov	r9, r1
 8005ed2:	dd48      	ble.n	8005f66 <__ieee754_log+0x2c6>
 8005ed4:	4b4e      	ldr	r3, [pc, #312]	; (8006010 <__ieee754_log+0x370>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	4650      	mov	r0, sl
 8005eda:	4659      	mov	r1, fp
 8005edc:	f7fa fb38 	bl	8000550 <__aeabi_dmul>
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	465b      	mov	r3, fp
 8005ee4:	f7fa fb34 	bl	8000550 <__aeabi_dmul>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4606      	mov	r6, r0
 8005eee:	460f      	mov	r7, r1
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	f7fa f976 	bl	80001e4 <__adddf3>
 8005ef8:	ec53 2b18 	vmov	r2, r3, d8
 8005efc:	f7fa fb28 	bl	8000550 <__aeabi_dmul>
 8005f00:	4680      	mov	r8, r0
 8005f02:	4689      	mov	r9, r1
 8005f04:	b964      	cbnz	r4, 8005f20 <__ieee754_log+0x280>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	f7fa f967 	bl	80001e0 <__aeabi_dsub>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4650      	mov	r0, sl
 8005f18:	4659      	mov	r1, fp
 8005f1a:	f7fa f961 	bl	80001e0 <__aeabi_dsub>
 8005f1e:	e6d6      	b.n	8005cce <__ieee754_log+0x2e>
 8005f20:	a321      	add	r3, pc, #132	; (adr r3, 8005fa8 <__ieee754_log+0x308>)
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	ec51 0b19 	vmov	r0, r1, d9
 8005f2a:	f7fa fb11 	bl	8000550 <__aeabi_dmul>
 8005f2e:	a320      	add	r3, pc, #128	; (adr r3, 8005fb0 <__ieee754_log+0x310>)
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	4604      	mov	r4, r0
 8005f36:	460d      	mov	r5, r1
 8005f38:	ec51 0b19 	vmov	r0, r1, d9
 8005f3c:	f7fa fb08 	bl	8000550 <__aeabi_dmul>
 8005f40:	4642      	mov	r2, r8
 8005f42:	464b      	mov	r3, r9
 8005f44:	f7fa f94e 	bl	80001e4 <__adddf3>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	4639      	mov	r1, r7
 8005f50:	f7fa f946 	bl	80001e0 <__aeabi_dsub>
 8005f54:	4652      	mov	r2, sl
 8005f56:	465b      	mov	r3, fp
 8005f58:	f7fa f942 	bl	80001e0 <__aeabi_dsub>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4620      	mov	r0, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	e7d9      	b.n	8005f1a <__ieee754_log+0x27a>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4650      	mov	r0, sl
 8005f6c:	4659      	mov	r1, fp
 8005f6e:	f7fa f937 	bl	80001e0 <__aeabi_dsub>
 8005f72:	ec53 2b18 	vmov	r2, r3, d8
 8005f76:	f7fa faeb 	bl	8000550 <__aeabi_dmul>
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	460f      	mov	r7, r1
 8005f7e:	2c00      	cmp	r4, #0
 8005f80:	f43f af23 	beq.w	8005dca <__ieee754_log+0x12a>
 8005f84:	a308      	add	r3, pc, #32	; (adr r3, 8005fa8 <__ieee754_log+0x308>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	ec51 0b19 	vmov	r0, r1, d9
 8005f8e:	f7fa fadf 	bl	8000550 <__aeabi_dmul>
 8005f92:	a307      	add	r3, pc, #28	; (adr r3, 8005fb0 <__ieee754_log+0x310>)
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	4604      	mov	r4, r0
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	ec51 0b19 	vmov	r0, r1, d9
 8005fa0:	e727      	b.n	8005df2 <__ieee754_log+0x152>
 8005fa2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8005ff8 <__ieee754_log+0x358>
 8005fa6:	e694      	b.n	8005cd2 <__ieee754_log+0x32>
 8005fa8:	fee00000 	.word	0xfee00000
 8005fac:	3fe62e42 	.word	0x3fe62e42
 8005fb0:	35793c76 	.word	0x35793c76
 8005fb4:	3dea39ef 	.word	0x3dea39ef
 8005fb8:	55555555 	.word	0x55555555
 8005fbc:	3fd55555 	.word	0x3fd55555
 8005fc0:	df3e5244 	.word	0xdf3e5244
 8005fc4:	3fc2f112 	.word	0x3fc2f112
 8005fc8:	96cb03de 	.word	0x96cb03de
 8005fcc:	3fc74664 	.word	0x3fc74664
 8005fd0:	94229359 	.word	0x94229359
 8005fd4:	3fd24924 	.word	0x3fd24924
 8005fd8:	55555593 	.word	0x55555593
 8005fdc:	3fe55555 	.word	0x3fe55555
 8005fe0:	d078c69f 	.word	0xd078c69f
 8005fe4:	3fc39a09 	.word	0x3fc39a09
 8005fe8:	1d8e78af 	.word	0x1d8e78af
 8005fec:	3fcc71c5 	.word	0x3fcc71c5
 8005ff0:	9997fa04 	.word	0x9997fa04
 8005ff4:	3fd99999 	.word	0x3fd99999
	...
 8006000:	c3500000 	.word	0xc3500000
 8006004:	43500000 	.word	0x43500000
 8006008:	7fefffff 	.word	0x7fefffff
 800600c:	3ff00000 	.word	0x3ff00000
 8006010:	3fe00000 	.word	0x3fe00000

08006014 <_init>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr

08006020 <_fini>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr
